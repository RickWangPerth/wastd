# Generated by Django 3.2.21 on 2023-09-27 07:21

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0010_alter_organisation_options'),
        ('observations', '0010_auto_20230919_1103'),
    ]

    operations = [
        migrations.CreateModel(
            name='TissueSampleObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.observation')),
                ('sample_type', models.CharField(choices=[('blood', 'Blood'), ('biopsy', 'Biopsy'), ('stomach-content', 'Stomach content'), ('egg', 'Egg'), ('skin', 'Skin'), ('muscle', 'Muscle'), ('liver', 'Liver'), ('heart', 'Heart'), ('kidney', 'Kidney'), ('gonad', 'Gonad'), ('fat', 'Fat'), ('brain', 'Brain'), ('faecal', 'Faecal'), ('epibiota', 'Epibiota'), ('keratin', 'Keratin'), ('bone', 'Bone'), ('tissue', 'Other tissue')], default='tissue', help_text='The type of tissue in this sample', max_length=128)),
                ('serial', models.CharField(blank=True, db_index=True, help_text='The ID/serial number of the sample', max_length=256, null=True)),
                ('description', models.TextField(blank=True, help_text='An optional description of the sample', null=True)),
                ('data', models.JSONField(default=dict, help_text='Sample analysis results')),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.AlterModelOptions(
            name='animalencounter',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='area',
            options={'ordering': ('-northern_extent', 'name')},
        ),
        migrations.AlterModelOptions(
            name='campaign',
            options={'ordering': ('-start_time', 'destination', 'owner')},
        ),
        migrations.AlterModelOptions(
            name='encounter',
            options={'get_latest_by': 'when', 'ordering': ('-when',)},
        ),
        migrations.AlterModelOptions(
            name='hatchlingmorphometricobservation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='lightsourceobservation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='linetransectencounter',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='loggerobservation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='managementaction',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='mediaattachment',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='nesttagobservation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='survey',
            options={'ordering': ('-start_time',)},
        ),
        migrations.AlterModelOptions(
            name='surveyend',
            options={'ordering': ('end_location', 'end_time')},
        ),
        migrations.AlterModelOptions(
            name='surveymediaattachment',
            options={},
        ),
        migrations.AlterModelOptions(
            name='tagobservation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='tracktallyobservation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='turtledamageobservation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='turtlehatchlingemergenceobservation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='turtlehatchlingemergenceoutlierobservation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='turtlemorphometricobservation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='turtlenestdisturbanceobservation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='turtlenestdisturbancetallyobservation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='turtlenestencounter',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterModelOptions(
            name='turtlenestobservation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='activity',
            field=models.CharField(choices=[('na', 'Not applicable'), ('arriving', 'Arriving on beach'), ('approaching', 'Approaching nesting site'), ('digging-body-pit', 'Digging body pit'), ('excavating-egg-chamber', 'Excavating egg chamber'), ('laying-eggs', 'Laying eggs'), ('filling-in-egg-chamber', 'Filling in egg chamber'), ('filling-in-nest', 'Filling in nest'), ('camouflaging-nest', 'Camouflaging nest'), ('returning-to-water', 'Returning to water'), ('general-breeding-activity', 'General breeding activity'), ('floating', 'Floating (dead, sick, unable to dive, drifting in water)'), ('beach-washed', 'Beach washed (dead, sick or stranded on beach/coast)'), ('beach-jumped', 'Beach jumped'), ('carcass-tagged-released', 'Carcass tagged and released'), ('carcass-inland', 'Carcass or butchered remains found removed from coast'), ('captivity', 'In captivity'), ('non-breeding', 'Non-breeding activity (swimming, sleeping, feeding, etc.)'), ('other', 'Other activity')], default='na', help_text="The animal's activity at the time of observation.", max_length=300),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='cause_of_death',
            field=models.CharField(choices=[('na', 'Not applicable'), ('indeterminate-decomposed', 'Indeterminate due to decomposition'), ('boat-strike', 'Boat strike'), ('trauma-human-induced', 'Human induced trauma'), ('trauma-animal-induced', 'Animal induced trauma'), ('drowned-entangled-fisheries', 'Drowned entangled in fisheries equipment'), ('drowned-entangled-infrastructure', 'Drowned entangled in infrastructure'), ('drowned-entangled-debris', 'Drowned entangled in debris'), ('drowned-entangled', 'Drowned entangled'), ('drowned-other', 'Drowned'), ('fishery-bycatch', 'Fishery bycatch'), ('handling-accident', 'Handling accident'), ('car-collision', 'Car collision'), ('ingested-debris', 'Ingested debris'), ('harvest', 'Harvested for human consumption'), ('poisoned', 'Poisoned'), ('misorientation', 'Misorientation on beach'), ('natural', 'Natural death'), ('birthing', 'Birthing complications'), ('still-born', 'Still birth'), ('calf-failure-to-thrive', 'Calf failed to thrive'), ('starved', 'Starvation'), ('stranded', 'Stranding'), ('euthanasia-firearm', 'Euthanasia by firearm'), ('euthanasia-injection', 'Euthanasia by injection'), ('euthanasia-implosion', 'Euthanasia by implosion'), ('euthanasia', 'Euthanasia'), ('predation', 'Predation')], default='na', help_text='If dead, is the case of death known?', max_length=300),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='cause_of_death_confidence',
            field=models.CharField(choices=[('na', 'Not applicable'), ('guess', 'Guess based on insuffient evidence'), ('expert-opinion', 'Expert opinion based on available evidence'), ('validated', 'Validated by authoritative source')], default='na', help_text='What is the cause of death, if known, based on?', max_length=300),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='checked_for_flipper_tags',
            field=models.CharField(choices=[('na', 'Not applicable'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Was the animal checked for flipper tags, were any found?', max_length=300),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='checked_for_injuries',
            field=models.CharField(choices=[('na', 'Not applicable'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Was the animal checked for injuries, were any found?', max_length=300),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='habitat',
            field=models.CharField(choices=[('na', 'Unknown habitat'), ('beach-below-high-water', 'Beach below high water mark'), ('beach-above-high-water', 'Beach above high water mark and dune'), ('beach-edge-of-vegetation', 'Edge of vegetation'), ('in-dune-vegetation', 'Inside vegetation'), ('beach', 'Beach (below vegetation line)'), ('bays-estuaries', 'Bays, estuaries and other enclosed shallow soft sediments'), ('dune', 'Dune'), ('dune-constructed-hard-substrate', 'Dune, constructed hard substrate (concrete slabs, timber floors, helipad)'), ('dune-grass-area', 'Dune, grass area'), ('dune-compacted-path', 'Dune, hard compacted areas (road ways, paths)'), ('dune-rubble', 'Dune, rubble, usually coral'), ('dune-bare-sand', 'Dune, bare sand area'), ('dune-beneath-vegetation', 'Dune, beneath tree or shrub'), ('slope-front-dune', 'Dune, front slope'), ('sand-flats', 'Sand flats'), ('slope-grass', 'Slope, grass area'), ('slope-bare-sand', 'Slope, bare sand area'), ('slope-beneath-vegetation', 'Slope, beneath tree or shrub'), ('below-mean-spring-high-water-mark', 'Below the mean spring high water line or current level of inundation (old db value)'), ('below-mshwm', 'Below the mean spring high water line or current level of inundation'), ('lagoon-patch-reef', 'Lagoon, patch reef'), ('lagoon-open-sand', 'Lagoon, open sand areas'), ('mangroves', 'Mangroves'), ('reef-coral', 'Coral reef'), ('reef-crest-front-slope', 'Reef crest (dries at low water) and front reef slope areas'), ('reef-flat', 'Reef flat, dries at low tide'), ('reef-seagrass-flats', 'Coral reef with seagrass flats'), ('reef-rocky', 'Rocky reef'), ('open-water', 'Open water'), ('harbour', 'Harbour'), ('boat-ramp', 'Boat ramp')], default='na', help_text='The habitat in which the animal was encountered.', max_length=500),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='identifiers',
            field=models.TextField(blank=True, help_text='A space-separated list of all identifers ever recorded as associated with this animal.\n        This list includes identifiers recorded only in earlier or later encounters.', null=True),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='maturity',
            field=models.CharField(choices=[('na', 'Unknown maturity'), ('hatchling', 'Hatchling'), ('post-hatchling', 'Post-hatchling'), ('juvenile', 'Juvenile'), ('pre-pubescent-immature', 'Pre-pubescent immature'), ('pubescent-immature', 'Pubescent immature'), ('sub-adult', 'Sub-adult'), ('adult-measured', 'Adult (status determined from carapace and tail measurements)'), ('unweaned', 'Unweaned immature'), ('weaned', 'Weaned immature'), ('adult', 'Adult')], default='na', help_text="The animal's maturity.", max_length=300),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='nesting_disturbed',
            field=models.CharField(choices=[('na', 'Not applicable'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Was the nesting interrupted? If so, specify disturbance in comments.', max_length=300),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='sex',
            field=models.CharField(choices=[('na', 'Not applicable'), ('unknown', 'Unknown'), ('male', 'Male'), ('female', 'Female'), ('intersex', 'Hermaphrodite or intersex')], default='na', help_text="The animal's sex.", max_length=300),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='sighting_status',
            field=models.CharField(choices=[('na', 'Unidentified'), ('new', 'Initial sighting'), ('resighting', 'Resighting'), ('remigrant', 'Remigrant')], default='na', help_text='The status is inferred automatically based on whether and where this animal was processed and identified last.', max_length=300),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='sighting_status_reason',
            field=models.CharField(blank=True, help_text='The rationale for the inferred sighting status.', max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='species',
            field=models.CharField(choices=[('na', 'Not applicable'), ('natator-depressus', 'Natator depressus (Flatback turtle)'), ('chelonia-mydas', 'Chelonia mydas (Green turtle)'), ('eretmochelys-imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('caretta-caretta', 'Caretta caretta (Loggerhead turtle)'), ('lepidochelys-olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('dermochelys-coriacea', 'Dermochelys coriacea (Leatherback turtle)'), ('chelonia-mydas-agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('test-turtle', 'Test/training turtle'), ('cheloniidae-fam', 'Cheloniidae (Unidentified turtle)'), ('delphinus-delphis', 'Delphinus delphis (Short-beaked common dolphin)'), ('grampus-griseus', "Grampus griseus (Risso's dolphin)"), ('lagenodelphis-hosei', "Lagenodelphis hosei (Fraser's dolphin)"), ('lagenorhynchus-obscurus', 'Lagenorhynchus obscurus (Dusky dolphin)'), ('orcaella-heinsohni', 'Orcaella heinsohni (Australian snubfin dolphin)'), ('sousa-sahulensis', 'Sousa sahulensis (Australian humpback dolphin)'), ('sousa-chinensis', 'Sousa chinensis (Chinese white dolphin)'), ('stenella-attenuata', 'Stenella attenuata (Pantropical spotted dolphin)'), ('stenella-coeruleoalba', 'Stenella coeruleoalba (Striped dolphin)'), ('stenella-longirostris', 'Stenella longirostris (Spinner dolphin)'), ('stenella-sp', 'Stenella sp. (Unidentified spotted dolphin)'), ('steno-bredanensis', 'Steno bredanensis (Rough-toothed dolphin)'), ('tursiops-aduncus', 'Tursiops aduncus (Indo-Pacific bottlenose dolphin)'), ('tursiops-truncatus', 'Tursiops truncatus (Offshore bottlenose dolphin)'), ('tursiops-sp', 'Tursiops sp. (Unidentified bottlenose dolphin)'), ('delphinidae-fam', 'Unidentified dolphin'), ('balaenoptera-acutorostrata', 'Balaenoptera acutorostrata (Dwarf minke whale)'), ('balaenoptera-bonaerensis', 'Balaenoptera bonaerensis (Antarctic minke whale)'), ('balaenoptera-borealis', 'Balaenoptera borealis (Sei whale)'), ('balaenoptera-edeni', "Balaenoptera edeni (Bryde's whale)"), ('balaenoptera-musculus', 'Balaenoptera musculus (Blue whale)'), ('balaenoptera-musculus-brevicauda', 'Balaenoptera musculus brevicauda (Pygmy blue whale)'), ('balaenoptera-physalus', 'Balaenoptera physalus (Fin whale)'), ('balaenoptera-omurai', "Balaenoptera omurai (Omura's whale)"), ('balaenoptera-sp', 'Balaenoptera sp. (Unidentified Balaenoptera)'), ('caperea-marginata', 'Caperea marginata (Pygmy Right Whale)'), ('eubalaena-australis', 'Eubalaena australis (Southern right whale)'), ('feresa-attenuata', 'Feresa attenuata (Pygmy killer whale)'), ('globicephala-macrorhynchus', 'Globicephala macrorhynchus (Short-finned pilot whale)'), ('globicephala-melas', 'Globicephala melas (Long-finned pilot whale)'), ('globicephala-sp', 'Globicephala sp. (Unidentified pilot whale)'), ('indopacetus-pacificus', "Indopacetus pacificus (Longman's beaked whale)"), ('kogia-breviceps', 'Kogia breviceps (Pygmy sperm whale)'), ('kogia-sima', 'Kogia sima (Dwarf sperm whale)'), ('kogia-sp', 'Kogia sp. (Unidentified small sperm whale)'), ('megaptera-novaeangliae', 'Megaptera novaeangliae (Humpback whale)'), ('mesoplodon-bowdoini', "Mesoplodon bowdoini (Andew's beaked whale)"), ('mesoplodon-densirostris', "Mesoplodon densirostris (Blainville's beaked whale)"), ('mesoplodon-grayi', "Mesoplodon grayi (Gray's beaked whale)"), ('mesoplodon-hectori', "Mesoplodon hectori (Hector's beaked whale"), ('mesoplodon-layardii', 'Mesoplodon layardii (Strap-toothed whale)'), ('mesoplodon-mirus', "Mesoplodon mirus (True's beaked whale)"), ('mesoplodon-sp', 'Mesoplodon sp. (Beaked whale)'), ('berardius-arnuxii', 'Berardius arnuxii (Giant beaked whale)'), ('orcinus-orca', 'Orcinus orca (Killer whale)'), ('peponocephala-electra', 'Peponocephala electra (Melon-headed whale)'), ('physeter-macrocephalus', 'Physeter macrocephalus (Sperm whale)'), ('pseudorca-crassidens', 'Pseudorca crassidens (False killer whale)'), ('ziphius-cavirostris', "Ziphius cavirostris (Cuvier's beaked whale)"), ('tasmacetus-shepherdi', "Tasmacetus shepherdi (Shepherd's beaked whale)"), ('cetacea', 'Unidentified whale'), ('dugong-dugon', 'Dugong dugon (Dugong)'), ('arctocephalus-forsteri', 'Arctocephalus forsteri (New Zealand fur seal)'), ('neophoca-cinerea', 'Neophoca cinerea (Australian sea lion)'), ('arctocephalus-tropicalis', 'Arctocephalus tropicalis (Subantarctic fur seal)'), ('hydrurga-leptonyx', 'Hydrurga leptonyx (Leopard seal)'), ('lobodon-carcinophagus', 'Lobodon carcinophagus (Crabeater seal)'), ('mirounga-leonina', 'Mirounga leonina (Southern elephant seal)'), ('pinnipedia', 'Unidentified pinniped'), ('hydrophiinae-subfam', 'Hydrophiinae subfam. (Sea snakes and kraits)'), ('acalyptophis-sp', 'Acalyptophis sp. (Horned sea snake)'), ('aipysurus-sp', 'Aipysurus sp. (Olive sea snake)'), ('astrotia-sp', "Astrotia sp. (Stokes' sea snake)"), ('emydocephalus-sp', 'Emydocephalus sp. (Turtlehead sea snake)'), ('enhydrina-sp', 'Enhydrina sp. (Beaked sea snake)'), ('ephalophis-sp', "Ephalophis sp. (Grey's mudsnake)"), ('hydrelaps-sp', 'Hydrelaps sp. (Port Darwin mudsnake)'), ('hydrophis-sp', 'Hydrophis sp. (sea snake)'), ('kerilia-sp', "Kerilia sp. (Jerdon's sea snake)"), ('kolpophis-sp', 'Kolpophis sp. (bighead sea snake)'), ('lapemis-sp', "Lapemis sp. (Shaw's sea snake)"), ('laticauda-sp', 'Laticauda sp. (Sea krait)'), ('parahydrophis-sp', 'Parahydrophis (Northern mangrove sea snake)'), ('parapistocalamus-sp', "Parapistocalamus sp. (Hediger's snake)"), ('pelamis-sp', 'Pelamis sp. (Yellow-bellied sea snake)'), ('praescutata-sp', 'Praescutata sp. (Sea snake)'), ('thalassophis-sp', 'Thalassophis sp. (Sea snake)')], default='na', help_text='The species of the animal.', max_length=300),
        ),
        migrations.AlterField(
            model_name='area',
            name='area_type',
            field=models.CharField(choices=[('MPA', 'MPA'), ('Locality', 'Locality'), ('Site', 'Site'), ('Region', 'DBCA Region'), ('District', 'DBCA District')], default='Site', help_text='The area type.', max_length=300),
        ),
        migrations.AlterField(
            model_name='area',
            name='centroid',
            field=django.contrib.gis.db.models.fields.PointField(blank=True, editable=False, help_text='The centroid is a simplified presentation of the Area.', null=True, srid=4326),
        ),
        migrations.AlterField(
            model_name='area',
            name='length_survey_roundtrip_m',
            field=models.DecimalField(blank=True, decimal_places=0, help_text='The total length of meters walked during an end to end survey of this area.', max_digits=10, null=True, verbose_name='Survey roundtrip (m)'),
        ),
        migrations.AlterField(
            model_name='area',
            name='length_surveyed_m',
            field=models.DecimalField(blank=True, decimal_places=0, help_text='The length of meters covered by a survey of this area. E.g., the meters of high water mark along a beach.', max_digits=10, null=True, verbose_name='Surveyed length (m)'),
        ),
        migrations.AlterField(
            model_name='area',
            name='name',
            field=models.CharField(help_text='The name of the area.', max_length=1000),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='comments',
            field=models.TextField(blank=True, help_text='Comments about the Campaign.', null=True),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='destination',
            field=models.ForeignKey(blank=True, help_text='The surveyed Locality.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='campaigns', to='observations.area'),
        ),
        migrations.AlterField(
            model_name='campaign',
            name='owner',
            field=models.ForeignKey(blank=True, help_text='The organisation that ran this Campaign owns all records (Surveys and Encounters).', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='campaigns', to='users.organisation'),
        ),
        migrations.AlterField(
            model_name='encounter',
            name='area',
            field=models.ForeignKey(blank=True, help_text='The general area this encounter took place in.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='encounter_area', to='observations.area'),
        ),
        migrations.AlterField(
            model_name='encounter',
            name='campaign',
            field=models.ForeignKey(blank=True, help_text='The overarching Campaign instigating this Encounter is automatically linked when a Campaign saved.', null=True, on_delete=django.db.models.deletion.CASCADE, to='observations.campaign'),
        ),
        migrations.AlterField(
            model_name='encounter',
            name='comments',
            field=models.TextField(blank=True, help_text='Comments', null=True),
        ),
        migrations.AlterField(
            model_name='encounter',
            name='encounter_type',
            field=models.CharField(blank=True, choices=[('stranding', 'Stranding'), ('tagging', 'Tagging'), ('nest', 'Nest'), ('tracks', 'Tracks'), ('inwater', 'In water'), ('tag-management', 'Tag Management'), ('logger', 'Logger'), ('other', 'Other')], default='other', editable=False, help_text='The primary concern of this encounter.', max_length=300, null=True),
        ),
        migrations.AlterField(
            model_name='encounter',
            name='source',
            field=models.CharField(choices=[('direct', 'Direct entry'), ('paper', 'Paper data sheet'), ('odk', 'OpenDataKit mobile data capture'), ('wamtram', 'WAMTRAM 2 tagging DB'), ('ntp-exmouth', 'NTP Access DB Exmouth'), ('ntp-broome', 'NTP Access DB Broome'), ('cet', 'Cetacean strandings DB'), ('pin', 'Pinniped strandings DB'), ('reconstructed', 'Reconstructed automatically')], db_index=True, default='direct', help_text='Where was this record captured initially?', max_length=300, verbose_name='Data source'),
        ),
        migrations.AlterField(
            model_name='encounter',
            name='survey',
            field=models.ForeignKey(blank=True, help_text='The survey during which this encounter happened.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='observations.survey'),
        ),
        migrations.AlterField(
            model_name='lightsourceobservation',
            name='light_source_type',
            field=models.CharField(choices=[('na', 'NA'), ('natural', 'Natural'), ('artificial', 'Artificial')], default='na', max_length=300),
        ),
        migrations.AlterField(
            model_name='loggerobservation',
            name='comments',
            field=models.TextField(blank=True, help_text='Comments', null=True),
        ),
        migrations.AlterField(
            model_name='managementaction',
            name='comments',
            field=models.TextField(blank=True, help_text='Any other comments or notes.', null=True),
        ),
        migrations.AlterField(
            model_name='managementaction',
            name='management_actions',
            field=models.TextField(blank=True, help_text='Managment actions taken. Keep updating as appropriate.', null=True),
        ),
        migrations.AlterField(
            model_name='nesttagobservation',
            name='comments',
            field=models.TextField(blank=True, help_text='Any other comments or notes.', null=True),
        ),
        migrations.AlterField(
            model_name='nesttagobservation',
            name='date_nest_laid',
            field=models.DateField(blank=True, help_text='The calendar (not turtle) date of nest creation.', null=True),
        ),
        migrations.AlterField(
            model_name='nesttagobservation',
            name='flipper_tag_id',
            field=models.CharField(blank=True, help_text='The primary flipper tag ID of the nesting turtle if available.', max_length=1000, null=True, verbose_name='Flipper tag ID'),
        ),
        migrations.AlterField(
            model_name='nesttagobservation',
            name='tag_label',
            field=models.CharField(blank=True, help_text='Any extra nest label if other two components are not available.', max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='observation',
            name='encounter',
            field=models.ForeignKey(help_text='The Encounter during which the observation was made', on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='observations.encounter'),
        ),
        migrations.AlterField(
            model_name='survey',
            name='area',
            field=models.ForeignKey(blank=True, help_text='The general area this survey took place in.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='survey_area', to='observations.area', verbose_name='Surveyed area'),
        ),
        migrations.AlterField(
            model_name='survey',
            name='campaign',
            field=models.ForeignKey(blank=True, help_text='The overarching Campaign instigating this Survey is automatically linked when a Campaign is saved.', null=True, on_delete=django.db.models.deletion.CASCADE, to='observations.campaign'),
        ),
        migrations.AlterField(
            model_name='survey',
            name='end_device_id',
            field=models.CharField(blank=True, help_text='The ID of the recording device which captured the end point, if available.', max_length=1000, null=True, verbose_name='End device ID'),
        ),
        migrations.AlterField(
            model_name='survey',
            name='label',
            field=models.CharField(blank=True, help_text='A human-readable, self-explanatory label.', max_length=500, null=True),
        ),
        migrations.AlterField(
            model_name='survey',
            name='site',
            field=models.ForeignKey(blank=True, help_text='The surveyed site, if known.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='observations.area', verbose_name='Surveyed site'),
        ),
        migrations.AlterField(
            model_name='survey',
            name='source',
            field=models.CharField(choices=[('direct', 'Direct entry'), ('paper', 'Paper data sheet'), ('odk', 'OpenDataKit mobile data capture'), ('wamtram', 'WAMTRAM 2 tagging DB'), ('ntp-exmouth', 'NTP Access DB Exmouth'), ('ntp-broome', 'NTP Access DB Broome'), ('cet', 'Cetacean strandings DB'), ('pin', 'Pinniped strandings DB'), ('reconstructed', 'Reconstructed automatically')], default='direct', help_text='Where was this record captured initially?', max_length=300, verbose_name='Data source'),
        ),
        migrations.AlterField(
            model_name='surveyend',
            name='source',
            field=models.CharField(choices=[('direct', 'Direct entry'), ('paper', 'Paper data sheet'), ('odk', 'OpenDataKit mobile data capture'), ('wamtram', 'WAMTRAM 2 tagging DB'), ('ntp-exmouth', 'NTP Access DB Exmouth'), ('ntp-broome', 'NTP Access DB Broome'), ('cet', 'Cetacean strandings DB'), ('pin', 'Pinniped strandings DB'), ('reconstructed', 'Reconstructed automatically')], default='direct', help_text='Where was this record captured initially?', max_length=300, verbose_name='Data source'),
        ),
        migrations.AlterField(
            model_name='surveymediaattachment',
            name='survey',
            field=models.ForeignKey(blank=True, help_text='The Survey this attachment belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='attachments', to='observations.survey'),
        ),
        migrations.AlterField(
            model_name='tagobservation',
            name='comments',
            field=models.TextField(blank=True, help_text='Any other comments or notes.', null=True),
        ),
        migrations.AlterField(
            model_name='tagobservation',
            name='handler',
            field=models.ForeignKey(blank=True, default=1, help_text='The person in physical contact with the tag', null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='tag_handler', to=settings.AUTH_USER_MODEL, verbose_name='Handled by'),
        ),
        migrations.AlterField(
            model_name='tagobservation',
            name='tag_location',
            field=models.CharField(choices=[('head', 'Head'), ('eyes', 'Eyes'), ('neck', 'Neck'), ('plastron', 'Plastron'), ('carapace', 'Carapace'), ('internals', 'Internal organs'), ('cloaca', 'Cloaca'), ('tail', 'Tail'), ('flipper-front-left-1', 'Front left flipper, 1st scale from body'), ('flipper-front-left-2', 'Front left flipper, 2nd scale from body'), ('flipper-front-left-3', 'Front left flipper, 3rd scale from body'), ('flipper-front-left', 'Front left flipper'), ('flipper-front-right-1', 'Front right flipper, 1st scale from body'), ('flipper-front-right-2', 'Front right flipper, 2nd scale from body'), ('flipper-front-right-3', 'Front right flipper, 3rd scale from body'), ('flipper-front-right', 'Front right flipper'), ('flipper-rear-left', 'Fear left flipper'), ('flipper-rear-right', 'Fear right flipper'), ('shoulder-left', 'Left shoulder'), ('shoulder-right', 'Right shoulder'), ('whole', 'Whole turtle'), ('other', 'Other')], default='whole', help_text='Where is the tag attached?', max_length=300),
        ),
        migrations.AlterField(
            model_name='tagobservation',
            name='tag_type',
            field=models.CharField(choices=[('flipper-tag', 'Flipper tag'), ('tag-scar', 'Tag scar'), ('pit-tag', 'PIT tag'), ('sat-tag', 'Satellite relay data logger'), ('blood-sample', 'Blood sample'), ('biopsy-sample', 'Biopsy sample'), ('stomach-content-sample', 'Stomach content sample'), ('physical-sample', 'Physical sample'), ('egg-sample', 'Egg sample'), ('qld-monel-a-flipper-tag', 'QLD Monel Series A flipper tag'), ('qld-titanium-k-flipper-tag', 'QLD Titanium Series K flipper tag'), ('qld-titanium-t-flipper-tag', 'QLD Titanium Series T flipper tag'), ('acoustic-tag', 'Acoustic tag'), ('commonwealth-titanium-flipper-tag', 'Commonwealth titanium flipper tag (old db value)'), ('cmlth-titanium-flipper-tag', 'Commonwealth titanium flipper tag'), ('cayman-juvenile-tag', 'Cayman juvenile tag'), ('hawaii-inconel-flipper-tag', 'Hawaii Inst Mar Biol Inconel tag'), ('ptt', 'Platform Transmitter Terminal (PTT)'), ('rototag', 'RotoTag'), ('narangebub-nickname', 'Narangebup rehab informal name'), ('aqwa-nickname', 'AQWA informal name'), ('atlantis-nickname', 'Atlantis informal name'), ('wa-museum-reptile-registration-number', 'WA Museum Natural History Reptiles Catalogue Registration Number (old db value)'), ('wam-reptile-registration-number', 'WA Museum Natural History Reptiles Catalogue Registration Number'), ('genetic-tag', 'Genetic ID sequence'), ('other', 'Other')], default='flipper-tag', help_text='What kind of tag is it?', max_length=300),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='species',
            field=models.CharField(choices=[('natator-depressus', 'Natator depressus (Flatback turtle)'), ('chelonia-mydas', 'Chelonia mydas (Green turtle)'), ('eretmochelys-imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('caretta-caretta', 'Caretta caretta (Loggerhead turtle)'), ('lepidochelys-olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('dermochelys-coriacea', 'Dermochelys coriacea (Leatherback turtle)'), ('chelonia-mydas-agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('test-turtle', 'Test/training turtle'), ('cheloniidae-fam', 'Cheloniidae (Unidentified turtle)')], default='cheloniidae-fam', help_text='The species of the animal causing the track.', max_length=300),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='tally',
            field=models.PositiveIntegerField(blank=True, help_text='The sum of encountered tracks.', null=True),
        ),
        migrations.AlterField(
            model_name='turtledamageobservation',
            name='damage_age',
            field=models.CharField(choices=[('healed-entirely', 'Entirely healed'), ('healed-partially', 'Partially healed'), ('fresh', 'Fresh'), ('unknown', 'Unknown')], default='healed-entirely', help_text='The age of the damage.', max_length=300),
        ),
        migrations.AlterField(
            model_name='turtledamageobservation',
            name='damage_type',
            field=models.CharField(choices=[('tip-amputated', 'Tip amputation'), ('amputated-from-nail', 'Amputation from nail'), ('amputated-half', 'Half amputation'), ('amputated-entirely', 'Entire amputation'), ('barnacles', 'Barnacles'), ('algal-growth', 'Algal growth'), ('tumor', 'Tumor'), ('tag-scar', 'Tag scar'), ('tag-seen', 'Tag seen but not identified'), ('cuts', 'Cuts'), ('boat-strike', 'Boat or propeller strike'), ('entanglement', 'Entanglement'), ('deformity', 'Deformity'), ('other', 'Other')], default='minor-trauma', help_text='The type of the damage.', max_length=300),
        ),
        migrations.AlterField(
            model_name='turtledamageobservation',
            name='description',
            field=models.TextField(blank=True, help_text='A description of the damage.', null=True),
        ),
        migrations.AlterField(
            model_name='turtlehatchlingemergenceobservation',
            name='cloud_cover_at_emergence',
            field=models.PositiveIntegerField(blank=True, help_text='If known, in eights.', null=True),
        ),
        migrations.AlterField(
            model_name='turtlehatchlingemergenceobservation',
            name='cloud_cover_at_emergence_known',
            field=models.CharField(choices=[('na', 'NA'), ('yes', 'Yes'), ('no', 'No')], default='na', max_length=300),
        ),
        migrations.AlterField(
            model_name='turtlehatchlingemergenceobservation',
            name='hatchling_emergence_time',
            field=models.DateTimeField(blank=True, help_text='The estimated time of hatchling emergence, stored as UTC and shown in local time.', null=True),
        ),
        migrations.AlterField(
            model_name='turtlehatchlingemergenceobservation',
            name='hatchling_emergence_time_known',
            field=models.CharField(choices=[('na', 'NA'), ('yes', 'Yes'), ('no', 'No')], default='na', max_length=300),
        ),
        migrations.AlterField(
            model_name='turtlehatchlingemergenceobservation',
            name='outlier_tracks_present',
            field=models.CharField(choices=[('na', 'Not applicable'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', max_length=300),
        ),
        migrations.AlterField(
            model_name='turtlenestdisturbanceobservation',
            name='comments',
            field=models.TextField(blank=True, help_text='Any other comments or notes.', null=True),
        ),
        migrations.AlterField(
            model_name='turtlenestdisturbanceobservation',
            name='disturbance_cause',
            field=models.CharField(choices=[('turtle', 'Other turtle'), ('bandicoot', 'Bandicoot predation'), ('bird', 'Bird predation'), ('crab', 'Crab predation'), ('croc', 'Croc predation'), ('cyclone', 'Cyclone disturbance'), ('dingo', 'Dingo predation'), ('dog', 'Dog predation'), ('cat', 'Cat predation'), ('fox', 'Fox predation'), ('goanna', 'Goanna predation'), ('human', 'Human'), ('pig', 'Pig predation'), ('tide', 'Tidal disturbance'), ('vehicle', 'Vehicle damage'), ('unknown', 'Unknown'), ('other', 'Other identifiable (see comments)')], help_text='The cause of the disturbance.', max_length=300),
        ),
        migrations.AlterField(
            model_name='turtlenestdisturbanceobservation',
            name='disturbance_severity',
            field=models.CharField(choices=[('negligible', 'negligible disturbance'), ('partly', 'nest partly destroyed'), ('completely', 'nest completely destroyed'), ('na', 'nest in indeterminate condition')], default='na', help_text='The impact of the disturbance on nest viability.', max_length=300),
        ),
        migrations.AlterField(
            model_name='turtlenestdisturbancetallyobservation',
            name='comments',
            field=models.TextField(blank=True, help_text='Any other comments or notes.', null=True),
        ),
        migrations.AlterField(
            model_name='turtlenestdisturbancetallyobservation',
            name='disturbance_cause',
            field=models.CharField(choices=[('turtle', 'Other turtle'), ('bandicoot', 'Bandicoot predation'), ('bird', 'Bird predation'), ('crab', 'Crab predation'), ('croc', 'Croc predation'), ('cyclone', 'Cyclone disturbance'), ('dingo', 'Dingo predation'), ('dog', 'Dog predation'), ('cat', 'Cat predation'), ('fox', 'Fox predation'), ('goanna', 'Goanna predation'), ('human', 'Human'), ('pig', 'Pig predation'), ('tide', 'Tidal disturbance'), ('vehicle', 'Vehicle damage'), ('unknown', 'Unknown'), ('other', 'Other identifiable (see comments)')], default='unknown', help_text='The cause of the disturbance.', max_length=300),
        ),
        migrations.AlterField(
            model_name='turtlenestdisturbancetallyobservation',
            name='species',
            field=models.CharField(choices=[('natator-depressus', 'Natator depressus (Flatback turtle)'), ('chelonia-mydas', 'Chelonia mydas (Green turtle)'), ('eretmochelys-imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('caretta-caretta', 'Caretta caretta (Loggerhead turtle)'), ('lepidochelys-olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('dermochelys-coriacea', 'Dermochelys coriacea (Leatherback turtle)'), ('chelonia-mydas-agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('test-turtle', 'Test/training turtle'), ('cheloniidae-fam', 'Cheloniidae (Unidentified turtle)')], default='cheloniidae-fam', help_text='The species of the nesting animal.', max_length=300),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='habitat',
            field=models.CharField(choices=[('na', 'Unknown habitat'), ('beach-below-high-water', 'Beach below high water mark'), ('beach-above-high-water', 'Beach above high water mark and dune'), ('beach-edge-of-vegetation', 'Edge of vegetation'), ('in-dune-vegetation', 'Inside vegetation')], default='na', help_text='The habitat in which the track or nest was encountered.', max_length=500),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='hatchlings_measured',
            field=models.CharField(choices=[('na', 'Not applicable'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Were turtle hatchlings encountered and their morphometrics measured?', max_length=300),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='species',
            field=models.CharField(choices=[('natator-depressus', 'Natator depressus (Flatback turtle)'), ('chelonia-mydas', 'Chelonia mydas (Green turtle)'), ('eretmochelys-imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('caretta-caretta', 'Caretta caretta (Loggerhead turtle)'), ('lepidochelys-olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('dermochelys-coriacea', 'Dermochelys coriacea (Leatherback turtle)'), ('chelonia-mydas-agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('test-turtle', 'Test/training turtle'), ('cheloniidae-fam', 'Cheloniidae (Unidentified turtle)')], default='cheloniidae-fam', help_text='The species of the animal which created the track or nest.', max_length=300),
        ),
        migrations.AlterField(
            model_name='turtlenestobservation',
            name='comments',
            field=models.TextField(blank=True, help_text='Any other comments or notes.', null=True),
        ),
        migrations.AlterUniqueTogether(
            name='surveymediaattachment',
            unique_together={('source', 'source_id')},
        ),
        migrations.AlterIndexTogether(
            name='encounter',
            index_together=set(),
        ),
    ]
