# Generated by Django 3.2.19 on 2023-07-03 06:12

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_fsm


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('observations', '0001_initial_squashed_0053_auto_20230109_0928'),
    ]

    operations = [
        migrations.CreateModel(
            name='TurtleTrackObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.observation')),
                ('max_track_width_front', models.PositiveIntegerField(blank=True, help_text='Maximum distance between sand touched by front flippers, measured in mm.', null=True)),
                ('max_track_width_rear', models.PositiveIntegerField(blank=True, help_text='Maximum distance between sand touched by rear flippers, measured in mm.', null=True)),
                ('carapace_drag_width', models.PositiveIntegerField(blank=True, help_text='Carapace drag width, measured in mm.', null=True)),
                ('step_length', models.PositiveIntegerField(blank=True, help_text='Distance with front flipper marks, measured in mm', null=True)),
                ('tail_pokes', models.BooleanField(blank=True, help_text='Are regular dips in the middle of the track present?', null=True)),
            ],
            options={
                'abstract': False,
                'base_manager_name': 'objects',
            },
            bases=('observations.observation',),
        ),
        migrations.AlterModelOptions(
            name='observation',
            options={'base_manager_name': 'objects'},
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='activity',
            field=models.CharField(choices=[('na', 'not observed'), ('arriving', 'arriving on beach'), ('approaching', 'approaching nesting site'), ('digging-body-pit', 'digging body pit'), ('excavating-egg-chamber', 'excavating egg chamber'), ('laying-eggs', 'laying eggs'), ('filling-in-egg-chamber', 'filling in egg chamber'), ('filling-in-nest', 'filling in nest'), ('camouflaging-nest', 'camouflaging nest'), ('returning-to-water', 'returning to water'), ('general-breeding-activity', 'general breeding activity'), ('floating', 'floating (dead, sick, unable to dive, drifting in water)'), ('beach-washed', 'beach washed (dead, sick or stranded on beach/coast)'), ('beach-jumped', 'beach jumped'), ('carcass-tagged-released', 'carcass tagged and released'), ('carcass-inland', 'carcass or butchered remains found removed from coast'), ('captivity', 'in captivity'), ('non-breeding', 'non-breeding activity (swimming, sleeping, feeding, etc.)'), ('other', 'other activity')], default='na', help_text="The animal's activity at the time of observation.", max_length=300, verbose_name='Activity'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='checked_for_flipper_tags',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Was the animal checked for flipper tags, were any found?', max_length=300, verbose_name='Checked for flipper tags'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='checked_for_injuries',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Was the animal checked for injuries, were any found?', max_length=300, verbose_name='Checked for injuries'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='datetime_of_last_sighting',
            field=models.DateTimeField(blank=True, help_text="The observation datetime of this animal's last sighting, shown as local time\n        (no daylight savings), stored as UTC. Blank if the animal has never been seen before.", null=True, verbose_name='Last seen on'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='habitat',
            field=models.CharField(choices=[('na', 'Unknown habitat'), ('beach-below-high-water', '(B) beach below high water mark'), ('beach-above-high-water', '(A) beach above high water mark and dune'), ('beach-edge-of-vegetation', '(E) edge of vegetation'), ('in-dune-vegetation', '(V) inside vegetation'), ('beach', 'beach (below vegetation line)'), ('bays-estuaries', 'bays, estuaries and other enclosed shallow soft sediments'), ('dune', 'dune'), ('dune-constructed-hard-substrate', 'dune, constructed hard substrate (concrete slabs, timber floors, helipad)'), ('dune-grass-area', 'dune, grass area'), ('dune-compacted-path', 'dune, hard compacted areas (road ways, paths)'), ('dune-rubble', 'dune, rubble, usually coral'), ('dune-bare-sand', 'dune, bare sand area'), ('dune-beneath-vegetation', 'dune, beneath tree or shrub'), ('slope-front-dune', 'dune, front slope'), ('sand-flats', 'sand flats'), ('slope-grass', 'slope, grass area'), ('slope-bare-sand', 'slope, bare sand area'), ('slope-beneath-vegetation', 'slope, beneath tree or shrub'), ('below-mean-spring-high-water-mark', 'below the mean spring high water line or current level of inundation (old db value)'), ('below-mshwm', 'below the mean spring high water line or current level of inundation'), ('lagoon-patch-reef', 'lagoon, patch reef'), ('lagoon-open-sand', 'lagoon, open sand areas'), ('mangroves', 'mangroves'), ('reef-coral', 'coral reef'), ('reef-crest-front-slope', 'reef crest (dries at low water) and front reef slope areas'), ('reef-flat', 'reef flat, dries at low tide'), ('reef-seagrass-flats', 'coral reef with seagrass flats'), ('reef-rocky', 'rocky reef'), ('open-water', 'open water'), ('harbour', 'harbour'), ('boat-ramp', 'boat ramp')], default='na', help_text='The habitat in which the animal was encountered.', max_length=500, verbose_name='Habitat'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='health',
            field=models.CharField(choices=[('na', 'Unknown health'), ('alive', 'Alive, healthy'), ('alive-injured', 'Alive, injured'), ('alive-then-died', 'D1 (alive, then died)'), ('dead-edible', 'D2 (dead, fresh)'), ('dead-organs-intact', 'D3 (dead, organs intact)'), ('dead-advanced', 'D4 (dead, organs decomposed)'), ('dead-mummified', 'D5 (dead, mummified)'), ('dead-disarticulated', 'D6 (dead, disarticulated)'), ('other', 'Other')], default='na', help_text="The animal's physical health", max_length=300, verbose_name='Health status'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='identifiers',
            field=models.TextField(blank=True, help_text='A space-separated list of all identifers ever recorded as associated with this animal.\n        This list includes identifiers recorded only in earlier or later encounters.', null=True, verbose_name='Identifiers'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='nesting_disturbed',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Was the nesting interrupted? If so, specify disturbance in comments.', max_length=300, verbose_name='Nesting disturbed'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='scanned_for_pit_tags',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Was the animal scanned for PIT tags, were any found?', max_length=300, verbose_name='Scanned for PIT tags'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='species',
            field=models.CharField(choices=[('na', 'not observed'), ('natator-depressus', 'Natator depressus (Flatback turtle)'), ('chelonia-mydas', 'Chelonia mydas (Green turtle)'), ('eretmochelys-imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('caretta-caretta', 'Caretta caretta (Loggerhead turtle)'), ('lepidochelys-olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('dermochelys-coriacea', 'Dermochelys coriacea (Leatherback turtle)'), ('chelonia-mydas-agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('test-turtle', 'Test/training turtle'), ('cheloniidae-fam', 'Cheloniidae (Unidentified turtle)'), ('delphinus-delphis', 'Delphinus delphis (Short-beaked common dolphin)'), ('grampus-griseus', "Grampus griseus (Risso's dolphin)"), ('lagenodelphis-hosei', "Lagenodelphis hosei (Fraser's dolphin)"), ('lagenorhynchus-obscurus', 'Lagenorhynchus obscurus (Dusky dolphin)'), ('orcaella-heinsohni', 'Orcaella heinsohni (Australian snubfin dolphin)'), ('sousa-sahulensis', 'Sousa sahulensis (Australian humpback dolphin)'), ('sousa-chinensis', 'Sousa chinensis (Chinese white dolphin)'), ('stenella-attenuata', 'Stenella attenuata (Pantropical spotted dolphin)'), ('stenella-coeruleoalba', 'Stenella coeruleoalba (Striped dolphin)'), ('stenella-longirostris', 'Stenella longirostris (Spinner dolphin)'), ('stenella-sp', 'Stenella sp. (Unidentified spotted dolphin)'), ('steno-bredanensis', 'Steno bredanensis (Rough-toothed dolphin)'), ('tursiops-aduncus', 'Tursiops aduncus (Indo-Pacific bottlenose dolphin)'), ('tursiops-truncatus', 'Tursiops truncatus (Offshore bottlenose dolphin)'), ('tursiops-sp', 'Tursiops sp. (Unidentified bottlenose dolphin)'), ('delphinidae-fam', 'Unidentified dolphin'), ('balaenoptera-acutorostrata', 'Balaenoptera acutorostrata (Dwarf minke whale)'), ('balaenoptera-bonaerensis', 'Balaenoptera bonaerensis (Antarctic minke whale)'), ('balaenoptera-borealis', 'Balaenoptera borealis (Sei whale)'), ('balaenoptera-edeni', "Balaenoptera edeni (Bryde's whale)"), ('balaenoptera-musculus', 'Balaenoptera musculus (Blue whale)'), ('balaenoptera-musculus-brevicauda', 'Balaenoptera musculus brevicauda (Pygmy blue whale)'), ('balaenoptera-physalus', 'Balaenoptera physalus (Fin whale)'), ('balaenoptera-omurai', "Balaenoptera omurai (Omura's whale)"), ('balaenoptera-sp', 'Balaenoptera sp. (Unidentified Balaenoptera)'), ('caperea-marginata', 'Caperea marginata (Pygmy Right Whale)'), ('eubalaena-australis', 'Eubalaena australis (Southern right whale)'), ('feresa-attenuata', 'Feresa attenuata (Pygmy killer whale)'), ('globicephala-macrorhynchus', 'Globicephala macrorhynchus (Short-finned pilot whale)'), ('globicephala-melas', 'Globicephala melas (Long-finned pilot whale)'), ('globicephala-sp', 'Globicephala sp. (Unidentified pilot whale)'), ('indopacetus-pacificus', "Indopacetus pacificus (Longman's beaked whale)"), ('kogia-breviceps', 'Kogia breviceps (Pygmy sperm whale)'), ('kogia-sima', 'Kogia sima (Dwarf sperm whale)'), ('kogia-sp', 'Kogia sp. (Unidentified small sperm whale)'), ('megaptera-novaeangliae', 'Megaptera novaeangliae (Humpback whale)'), ('mesoplodon-bowdoini', "Mesoplodon bowdoini (Andew's beaked whale)"), ('mesoplodon-densirostris', "Mesoplodon densirostris (Blainville's beaked whale)"), ('mesoplodon-grayi', "Mesoplodon grayi (Gray's beaked whale)"), ('mesoplodon-hectori', "Mesoplodon hectori (Hector's beaked whale"), ('mesoplodon-layardii', 'Mesoplodon layardii (Strap-toothed whale)'), ('mesoplodon-mirus', "Mesoplodon mirus (True's beaked whale)"), ('mesoplodon-sp', 'Mesoplodon sp. (Beaked whale)'), ('berardius-arnuxii', 'Berardius arnuxii (Giant beaked whale)'), ('orcinus-orca', 'Orcinus orca (Killer whale)'), ('peponocephala-electra', 'Peponocephala electra (Melon-headed whale)'), ('physeter-macrocephalus', 'Physeter macrocephalus (Sperm whale)'), ('pseudorca-crassidens', 'Pseudorca crassidens (False killer whale)'), ('ziphius-cavirostris', "Ziphius cavirostris (Cuvier's beaked whale)"), ('tasmacetus-shepherdi', "Tasmacetus shepherdi (Shepherd's beaked whale)"), ('cetacea', 'Unidentified whale'), ('dugong-dugon', 'Dugong dugon (Dugong)'), ('arctocephalus-forsteri', 'Arctocephalus forsteri (New Zealand fur seal)'), ('neophoca-cinerea', 'Neophoca cinerea (Australian sea lion)'), ('arctocephalus-tropicalis', 'Arctocephalus tropicalis (Subantarctic fur seal)'), ('hydrurga-leptonyx', 'Hydrurga leptonyx (Leopard seal)'), ('lobodon-carcinophagus', 'Lobodon carcinophagus (Crabeater seal)'), ('mirounga-leonina', 'Mirounga leonina (Southern elephant seal)'), ('pinnipedia', 'Unidentified pinniped'), ('hydrophiinae-subfam', 'Hydrophiinae subfam. (Sea snakes and kraits)'), ('acalyptophis-sp', 'Acalyptophis sp. (Horned sea snake)'), ('aipysurus-sp', 'Aipysurus sp. (Olive sea snake)'), ('astrotia-sp', "Astrotia sp. (Stokes' sea snake)"), ('emydocephalus-sp', 'Emydocephalus sp. (Turtlehead sea snake)'), ('enhydrina-sp', 'Enhydrina sp. (Beaked sea snake)'), ('ephalophis-sp', "Ephalophis sp. (Grey's mudsnake)"), ('hydrelaps-sp', 'Hydrelaps sp. (Port Darwin mudsnake)'), ('hydrophis-sp', 'Hydrophis sp. (sea snake)'), ('kerilia-sp', "Kerilia sp. (Jerdon's sea snake)"), ('kolpophis-sp', 'Kolpophis sp. (bighead sea snake)'), ('lapemis-sp', "Lapemis sp. (Shaw's sea snake)"), ('laticauda-sp', 'Laticauda sp. (Sea krait)'), ('parahydrophis-sp', 'Parahydrophis (Northern mangrove sea snake)'), ('parapistocalamus-sp', "Parapistocalamus sp. (Hediger's snake)"), ('pelamis-sp', 'Pelamis sp. (Yellow-bellied sea snake)'), ('praescutata-sp', 'Praescutata sp. (Sea snake)'), ('thalassophis-sp', 'Thalassophis sp. (Sea snake)')], default='na', help_text='The species of the animal.', max_length=300, verbose_name='Species'),
        ),
        migrations.AlterField(
            model_name='dugongmorphometricobservation',
            name='tusks_found',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Did the animal have tusks?', max_length=300, verbose_name='Tusks found'),
        ),
        migrations.AlterField(
            model_name='encounter',
            name='name',
            field=models.CharField(blank=True, editable=False, help_text="An automatically inferred read-only identifier for the encountered subject,\n        e.g. in the case of AnimalEncounters, the animal's earliest associated tag ID.\n        Encounters with the same identifer are encounters of the same subject (e.g. the same turtle).", max_length=1000, null=True, verbose_name='Encounter Subject Identifer'),
        ),
        migrations.AlterField(
            model_name='encounter',
            name='reporter',
            field=models.ForeignKey(default=1, help_text='The person who wrote the initial data sheet in the field. The reporter is the source of handwriting and spelling errors.', on_delete=django.db.models.deletion.SET_DEFAULT, related_name='encounters_reported', to=settings.AUTH_USER_MODEL, verbose_name='Recorded by'),
        ),
        migrations.AlterField(
            model_name='encounter',
            name='status',
            field=django_fsm.FSMField(choices=[('new', 'New'), ('imported', 'Imported'), ('manual input', 'Manual input'), ('proofread', 'Proofread'), ('curated', 'Curated'), ('published', 'Published'), ('flagged', 'Flagged'), ('rejected', 'Rejected')], default='new', max_length=50, verbose_name='QA Status'),
        ),
        migrations.AlterField(
            model_name='survey',
            name='end_time',
            field=models.DateTimeField(blank=True, help_text="The datetime of leaving the site, shown as local time (no daylight savings), stored as UTC.\n        The time of 'feet in the sand, done recording encounters.'", null=True, verbose_name='Survey end time'),
        ),
        migrations.AlterField(
            model_name='survey',
            name='start_time',
            field=models.DateTimeField(blank=True, help_text="The datetime of entering the site, shown as local time (no daylight savings), stored as UTC.\n        The time of 'feet in the sand, start recording encounters'.", null=True, verbose_name='Survey start time'),
        ),
        migrations.AlterField(
            model_name='temperatureloggerdeployment',
            name='habitat',
            field=models.CharField(choices=[('na', 'Unknown habitat'), ('beach-below-high-water', '(B) beach below high water mark'), ('beach-above-high-water', '(A) beach above high water mark and dune'), ('beach-edge-of-vegetation', '(E) edge of vegetation'), ('in-dune-vegetation', '(V) inside vegetation'), ('beach', 'beach (below vegetation line)'), ('bays-estuaries', 'bays, estuaries and other enclosed shallow soft sediments'), ('dune', 'dune'), ('dune-constructed-hard-substrate', 'dune, constructed hard substrate (concrete slabs, timber floors, helipad)'), ('dune-grass-area', 'dune, grass area'), ('dune-compacted-path', 'dune, hard compacted areas (road ways, paths)'), ('dune-rubble', 'dune, rubble, usually coral'), ('dune-bare-sand', 'dune, bare sand area'), ('dune-beneath-vegetation', 'dune, beneath tree or shrub'), ('slope-front-dune', 'dune, front slope'), ('sand-flats', 'sand flats'), ('slope-grass', 'slope, grass area'), ('slope-bare-sand', 'slope, bare sand area'), ('slope-beneath-vegetation', 'slope, beneath tree or shrub'), ('below-mean-spring-high-water-mark', 'below the mean spring high water line or current level of inundation (old db value)'), ('below-mshwm', 'below the mean spring high water line or current level of inundation'), ('lagoon-patch-reef', 'lagoon, patch reef'), ('lagoon-open-sand', 'lagoon, open sand areas'), ('mangroves', 'mangroves'), ('reef-coral', 'coral reef'), ('reef-crest-front-slope', 'reef crest (dries at low water) and front reef slope areas'), ('reef-flat', 'reef flat, dries at low tide'), ('reef-seagrass-flats', 'coral reef with seagrass flats'), ('reef-rocky', 'rocky reef'), ('open-water', 'open water'), ('harbour', 'harbour'), ('boat-ramp', 'boat ramp')], default='na', help_text='The habitat in which the nest was encountered.', max_length=500, verbose_name='Habitat'),
        ),
        migrations.AlterField(
            model_name='temperatureloggerdeployment',
            name='marker1_present',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Is the first marker in place?', max_length=300, verbose_name='Marker 1 present'),
        ),
        migrations.AlterField(
            model_name='temperatureloggerdeployment',
            name='marker2_present',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Is the second marker in place?', max_length=300, verbose_name='Marker 2 present'),
        ),
        migrations.AlterField(
            model_name='temperatureloggersettings',
            name='tested',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Was the logger tested after programming?', max_length=300, verbose_name='Tested'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='nest_age',
            field=models.CharField(choices=[('fresh', 'Fresh, made last night'), ('missed', 'Missed turtle, made within past hours'), ('old', 'Old, made before last night'), ('unknown', 'Unknown age')], default='unknown', help_text='The track or nest age.', max_length=300, verbose_name='Age'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='nest_type',
            field=models.CharField(choices=[('track-not-assessed', 'Track, not checked for nest'), ('false-crawl', 'Track without nest'), ('successful-crawl', 'Track with nest'), ('track-unsure', 'Track, checked for nest, unsure if nest'), ('nest', 'Nest, unhatched, no track'), ('hatched-nest', 'Nest, hatched'), ('body-pit', 'Body pit, no track')], default='track-not-assessed', help_text='The track or nest type.', max_length=300, verbose_name='Type'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='species',
            field=models.CharField(choices=[('natator-depressus', 'Natator depressus (Flatback turtle)'), ('chelonia-mydas', 'Chelonia mydas (Green turtle)'), ('eretmochelys-imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('caretta-caretta', 'Caretta caretta (Loggerhead turtle)'), ('lepidochelys-olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('dermochelys-coriacea', 'Dermochelys coriacea (Leatherback turtle)'), ('chelonia-mydas-agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('test-turtle', 'Test/training turtle'), ('cheloniidae-fam', 'Cheloniidae (Unidentified turtle)')], default='cheloniidae-fam', help_text='The species of the animal causing the track.', max_length=300, verbose_name='Species'),
        ),
        migrations.AlterField(
            model_name='turtlehatchlingemergenceobservation',
            name='light_sources_present',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='', max_length=300, verbose_name='Light sources present during emergence'),
        ),
        migrations.AlterField(
            model_name='turtlehatchlingemergenceobservation',
            name='outlier_tracks_present',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='', max_length=300, verbose_name='Outlier tracks present'),
        ),
        migrations.AlterField(
            model_name='turtlehatchlingemergenceoutlierobservation',
            name='outlier_group_size',
            field=models.PositiveIntegerField(blank=True, help_text='', null=True, verbose_name='Number of tracks in outlier group'),
        ),
        migrations.AlterField(
            model_name='turtlenestdisturbancetallyobservation',
            name='species',
            field=models.CharField(choices=[('natator-depressus', 'Natator depressus (Flatback turtle)'), ('chelonia-mydas', 'Chelonia mydas (Green turtle)'), ('eretmochelys-imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('caretta-caretta', 'Caretta caretta (Loggerhead turtle)'), ('lepidochelys-olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('dermochelys-coriacea', 'Dermochelys coriacea (Leatherback turtle)'), ('chelonia-mydas-agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('test-turtle', 'Test/training turtle'), ('cheloniidae-fam', 'Cheloniidae (Unidentified turtle)')], default='cheloniidae-fam', help_text='The species of the nesting animal.', max_length=300, verbose_name='Species'),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='disturbance',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Is there evidence of predation or other disturbance?', max_length=300, verbose_name='Evidence of predation or disturbance'),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='eggs_counted',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Was the nest excavated and were turtle eggs counted?', max_length=300, verbose_name='Nest excavated and eggs counted'),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='fan_angles_measured',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Were hatchling emergence track fan angles recorded?', max_length=300, verbose_name='Hatchling emergence recorded'),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='habitat',
            field=models.CharField(choices=[('na', 'Unknown habitat'), ('beach-below-high-water', '(B) beach below high water mark'), ('beach-above-high-water', '(A) beach above high water mark and dune'), ('beach-edge-of-vegetation', '(E) edge of vegetation'), ('in-dune-vegetation', '(V) inside vegetation')], default='na', help_text='The habitat in which the track or nest was encountered.', max_length=500, verbose_name='Habitat'),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='hatchlings_measured',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Were turtle hatchlings encountered and their morphometrics measured?', max_length=300, verbose_name='Hatchlings measured'),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='logger_found',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Was a data logger deployed, retrieved, or otherwise encountered?', max_length=300, verbose_name='Logger present'),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='nest_age',
            field=models.CharField(choices=[('fresh', 'Fresh, made last night'), ('missed', 'Missed turtle, made within past hours'), ('old', 'Old, made before last night'), ('unknown', 'Unknown age')], default='unknown', help_text='The track or nest age.', max_length=300, verbose_name='Age'),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='nest_tagged',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Absent'), ('present', 'Present'), ('yes', 'Yes'), ('no', 'No')], default='na', help_text='Was a nest tag applied, re-sighted, or otherwise encountered?', max_length=300, verbose_name='Nest tag present'),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='nest_type',
            field=models.CharField(choices=[('track-not-assessed', 'Track, not checked for nest'), ('false-crawl', 'Track without nest'), ('successful-crawl', 'Track with nest'), ('track-unsure', 'Track, checked for nest, unsure if nest'), ('nest', 'Nest, unhatched, no track'), ('hatched-nest', 'Nest, hatched'), ('body-pit', 'Body pit, no track')], default='track-not-assessed', help_text='The track or nest type.', max_length=300, verbose_name='Type'),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='species',
            field=models.CharField(choices=[('natator-depressus', 'Natator depressus (Flatback turtle)'), ('chelonia-mydas', 'Chelonia mydas (Green turtle)'), ('eretmochelys-imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('caretta-caretta', 'Caretta caretta (Loggerhead turtle)'), ('lepidochelys-olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('dermochelys-coriacea', 'Dermochelys coriacea (Leatherback turtle)'), ('chelonia-mydas-agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('test-turtle', 'Test/training turtle'), ('cheloniidae-fam', 'Cheloniidae (Unidentified turtle)')], default='cheloniidae-fam', help_text='The species of the animal which created the track or nest.', max_length=300, verbose_name='Species'),
        ),
    ]
