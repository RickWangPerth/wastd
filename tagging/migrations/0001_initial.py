# Generated by Django 3.2.18 on 2023-04-21 03:10

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EntryBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateField(blank=True, null=True)),
                ('filename', models.TextField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('pr_date_convention', models.BooleanField(null=True)),
                ('entered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'entry batches',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'verbose_name_plural': 'turtle species',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='MeasurementType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_desc', models.CharField(max_length=16, unique=True)),
                ('description', models.CharField(max_length=128)),
                ('unit', models.CharField(blank=True, max_length=16, null=True)),
                ('minimum_value', models.FloatField(blank=True, null=True)),
                ('maximum_value', models.FloatField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('rookery', models.BooleanField(null=True)),
                ('beach_approach', models.CharField(blank=True, max_length=64, null=True)),
                ('aspect', models.CharField(blank=True, max_length=3, null=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('comments', models.TextField(blank=True, null=True)),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='places', to='tagging.location')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='TagOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.CharField(max_length=64)),
                ('order_date', models.DateField(blank=True, null=True)),
                ('tag_prefix', models.CharField(blank=True, max_length=16, null=True)),
                ('start_tag_number', models.IntegerField(blank=True, null=True)),
                ('end_tag_number', models.IntegerField(blank=True, null=True)),
                ('total_tags', models.IntegerField(blank=True, null=True)),
                ('date_received', models.DateField(blank=True, null=True)),
                ('paid_by', models.CharField(blank=True, max_length=128, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Turtle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('sex', models.CharField(choices=[('F', 'Female'), ('M', 'Male'), ('U', 'Unknown'), ('I', 'Indeterminate')], max_length=1)),
                ('status', models.CharField(blank=True, choices=[('A', 'Tag Turtles'), ('C', 'Captive'), ('E', 'Error (data not to be used)'), ('N', 'Non-tagged turtle'), ('P', 'Query new tagged'), ('Q', 'Query identity'), ('R', 'Re-entered population - Original Tag identity now unknown'), ('S', 'Salvage'), ('T', 'Tagged turtle - with full Tag history: first tag to last known')], max_length=1, null=True)),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('cause_of_death', models.CharField(blank=True, choices=[('BS', 'Boat strike'), ('DR', 'Drowning'), ('FI', 'Fishery'), ('HA', 'Handling accident'), ('IH', 'Indigenous hunt'), ('MO', 'Misorientation on beach'), ('NC', 'Natural causes'), ('SH', 'Shark predation'), ('UK', 'Unknown')], max_length=2, null=True)),
                ('re_entered_population', models.CharField(blank=True, max_length=1, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('original_turtle_id', models.IntegerField(blank=True, null=True)),
                ('mund_id', models.CharField(blank=True, max_length=255, null=True)),
                ('identification_confidence', models.CharField(blank=True, max_length=1, null=True)),
                ('entered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='turtles_entered', to=settings.AUTH_USER_MODEL)),
                ('entry_batch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tagging.entrybatch')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='turtles', to='tagging.location')),
            ],
        ),
        migrations.CreateModel(
            name='TurtleObservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('observed', models.DateTimeField()),
                ('observation_date_old', models.DateField(blank=True, null=True)),
                ('date_convention', models.CharField(choices=[('C', 'Calendar'), ('E', 'Evening'), ('U', 'Unknown')], max_length=1)),
                ('status', models.CharField(blank=True, choices=[('Initial Nesting', 'Initial Nesting'), ('Initial Sighting', 'Initial Sighting'), ('Remigrant', 'Remigrant'), ('Resighting', 'Resighting')], max_length=128, null=True)),
                ('alive', models.BooleanField(null=True)),
                ('place_description', models.TextField(blank=True, null=True)),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('activity', models.CharField(blank=True, choices=[('L', 'Arriving - Nesting'), ('K', 'Basking - on beach above waterline'), ('&', 'Captive animal'), ('W', 'Captured in water (reef or sea)'), ('V', 'Caught in fishing gear - Deceased'), ('Y', 'Caught in fishing gear - Released'), ('J', 'Check/edit these: only on VA records'), ('C', 'Climbing beach slope - Nesting'), ('H', 'Covering nest (filling in) - Nesting'), ('N', 'Courting'), ('E', 'Digging body hole - Nesting'), ('F', 'Excavating egg chamber - Nesting'), ('O', 'Free at sea'), ('Z', 'Hunted for food by Ab & others'), ('G', 'Laying eggs - confirmed observation - Nesting'), ('B', 'Leaving water - Nesting'), ('M', 'Mating'), ('D', 'Moving over bare sand (=beach) - Nesting'), ('P', 'Not listed - Nesting event'), ('Q', 'Not recorded in field'), ('R', 'Released to wild'), ('S', 'Rescued from stranding'), ('A', 'Resting at waters edge - Nesting'), ('I', 'Returning to water - Nesting'), ('X', 'Turtle dead')], max_length=1, null=True)),
                ('beach_position', models.CharField(blank=True, choices=[('?', 'Not listed - Nesting event'), ('A', 'Above high water - Nesting event'), ('B', 'At high water - Nesting event'), ('C', 'Below high water - Nesting event'), ('D', 'Edge of spinifex (beach veg line) - Nesting event'), ('E', 'In spinifex (among beach veg) - Nesting event')], max_length=1, null=True)),
                ('condition', models.CharField(blank=True, choices=[('D', 'Carcass - decomposed'), ('F', 'Carcass - fresh'), ('G', 'Good - fat'), ('H', 'Live & fit'), ('I', 'Injured but OK'), ('M', 'Moribund'), ('P', 'Poor - thin'), ('U', 'Floater - unable to dive')], max_length=1, null=True)),
                ('nesting', models.BooleanField(null=True)),
                ('clutch_completed', models.CharField(blank=True, choices=[('Y', 'Yes'), ('N', 'No'), ('P', 'Possible'), ('U', 'Uncertain'), ('D', "Didn't check")], max_length=1, null=True)),
                ('number_of_eggs', models.IntegerField(blank=True, null=True)),
                ('egg_count_method', models.CharField(blank=True, choices=[('1Dr', 'Obs drop on laying'), ('2Ex', 'Exc & count post-lay'), ('3PH', 'Post-hatch nest exhumation')], max_length=3, null=True)),
                ('action_taken', models.TextField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('original_observation_id', models.IntegerField(blank=True, null=True)),
                ('comment_fromrecordedtagstable', models.TextField(blank=True, null=True)),
                ('scars_left', models.BooleanField(null=True)),
                ('scars_right', models.BooleanField(null=True)),
                ('transferid', models.IntegerField(blank=True, null=True)),
                ('mund', models.BooleanField(null=True)),
                ('scars_left_scale_1', models.BooleanField(help_text='Left flipper scale closest to body', null=True)),
                ('scars_left_scale_2', models.BooleanField(help_text='Left flipper scale 2nd from body', null=True)),
                ('scars_left_scale_3', models.BooleanField(help_text='Left flipper scale 3rd from body', null=True)),
                ('scars_right_scale_1', models.BooleanField(help_text='Right flipper scale closest to body', null=True)),
                ('scars_right_scale_2', models.BooleanField(help_text='Right flipper scale 2nd from body', null=True)),
                ('scars_right_scale_3', models.BooleanField(help_text='Right flipper scale 3rd from body', null=True)),
                ('cc_length_not_measured', models.BooleanField(null=True)),
                ('cc_notch_length_not_measured', models.BooleanField(null=True)),
                ('cc_width_not_measured', models.BooleanField(null=True)),
                ('tagscarnotchecked', models.BooleanField(null=True)),
                ('didnotcheckforinjury', models.BooleanField(null=True)),
                ('corrected_date', models.DateField(blank=True, null=True)),
                ('entered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='turtleobservations_entered', to=settings.AUTH_USER_MODEL)),
                ('entry_batch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tagging.entrybatch')),
                ('measurer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurer', to=settings.AUTH_USER_MODEL)),
                ('measurer_reporter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='measurer_reporter', to=settings.AUTH_USER_MODEL)),
                ('place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tagging.place')),
                ('reporter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='reporter', to=settings.AUTH_USER_MODEL)),
                ('tagger', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tagger', to=settings.AUTH_USER_MODEL)),
                ('turtle', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.turtle')),
            ],
            options={
                'ordering': ('observed',),
            },
        ),
        migrations.CreateModel(
            name='TurtlePitTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial', models.CharField(max_length=64, unique=True)),
                ('issue_location', models.CharField(blank=True, max_length=128, null=True)),
                ('status', models.CharField(blank=True, choices=[('1DD', '1 DUD - Tag U/s'), ('2DB', '2 DUDB - Tag U/s break'), ('3DC', '3 DUDC - Clinch not on turtle'), ('4DM', '4 DUDM - Mfr error'), ('5DROP', '5 DROP - Lost on beach'), ('8YY', 'Tag unknown fate'), ('ATT', 'Tag attached to turtle - Read OK'), ('DET', 'Tag taken from dead turtle'), ('Nil', 'No tag applied'), ('POOR', 'Applied new - Did not read'), ('QRY', 'Unknown if PIT present'), ('RMVD', 'Tag removed ex live turtle'), ('SAL', 'Salvaged'), ('U', 'Unused PIT')], max_length=16, null=True)),
                ('return_date', models.DateField(blank=True, null=True)),
                ('return_condition', models.CharField(blank=True, max_length=128, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('batch_number', models.CharField(blank=True, max_length=128, null=True)),
                ('box_number', models.CharField(blank=True, max_length=128, null=True)),
                ('custodian', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pit_tag_custodian', to=settings.AUTH_USER_MODEL)),
                ('field_person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pit_tag_field_person', to=settings.AUTH_USER_MODEL)),
                ('tag_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tagging.tagorder')),
                ('turtle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='pit_tags', to='tagging.turtle')),
            ],
        ),
        migrations.CreateModel(
            name='TurtleSpecies',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scientific_name', models.CharField(max_length=128, unique=True)),
                ('common_name', models.CharField(blank=True, max_length=128, null=True)),
                ('old_species_code', models.CharField(blank=True, max_length=2, null=True)),
                ('hide_dataentry', models.BooleanField(null=True)),
            ],
            options={
                'verbose_name_plural': 'turtle species',
                'ordering': ('common_name',),
            },
        ),
        migrations.CreateModel(
            name='TurtleTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial', models.CharField(max_length=64, unique=True)),
                ('issue_location', models.CharField(blank=True, max_length=128, null=True)),
                ('status', models.CharField(blank=True, choices=[('0BRK', '0 BRK - Tag Broken'), ('1DD', '1 DUD - Tag U/s'), ('2DB', '2 DUDB - Tag U/s break'), ('3DC', '3 DUDC - Clinch NO turtle'), ('4DM', '4 DUDM - Mfr error'), ('5DROP', '5 DROP - Lost on beach'), ('6NAD', '6 NOAD - Mfr error'), ('7NSP', '7 NOSP - Supply error'), ('8YY', 'Tag unknown fate'), ('ATT', 'Tag attached to turtle'), ('DET', 'Tag taken from dead turtle'), ('LOST', 'Tag lost off turtle'), ('Nil', 'No tag applied'), ('POOR', 'Poor fix on turtle'), ('QRY', 'Unknown if tag present'), ('RCL', 'Tag reclinched at obs'), ('RFX', 'Tag refixed at obs'), ('RMVD', 'Tag removed ex live turtle'), ('SAL', 'Salvage for reuse'), ('U', 'Unused tag')], max_length=16, null=True)),
                ('return_date', models.DateField(blank=True, null=True)),
                ('return_condition', models.CharField(blank=True, max_length=128, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('side', models.CharField(blank=True, choices=[('L', 'Left'), ('R', 'Right')], max_length=1, null=True)),
                ('custodian', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tag_custodian', to=settings.AUTH_USER_MODEL)),
                ('field_person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tag_field_person', to=settings.AUTH_USER_MODEL)),
                ('tag_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tagging.tagorder')),
                ('turtle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tags', to='tagging.turtle')),
            ],
        ),
        migrations.CreateModel(
            name='TurtleTagObservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, choices=[('#', 'Query number - Tag on'), ('0L', 'False Id as Lost'), ('A1', 'Applied new - OK fix'), ('A2', 'No tag applied'), ('AE', 'Applied new - end clinch noted'), ('M', 'Missing - obs record'), ('M1', 'Missing  - NOT obs'), ('N', 'Not Recorded'), ('OO', 'Open at Obs - Tag came off & not refixed'), ('OX', 'Open at Obs - Tag refixed'), ('P', 'Present Obs - & Read only'), ('P_ED', 'Present Obs - nr F edge & Read'), ('P_OK', 'Present Obs - OK fix & Read'), ('PX', 'Present Obs - Tag#s not read'), ('Q', 'Query present'), ('R', 'Removed by Obs'), ('RC', 'Insecure at Obs - reclinched in situ'), ('RQ', 'Insecure at Obs - Action ??')], max_length=8, null=True)),
                ('position', models.SmallIntegerField(blank=True, null=True)),
                ('barnacles', models.BooleanField(null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('observation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='tag_observations', to='tagging.turtleobservation')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='tagging.turtletag')),
            ],
        ),
        migrations.CreateModel(
            name='TurtleSample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tissue_type', models.CharField(choices=[('1', 'Blood'), ('2', 'Skin'), ('3', 'Muscle - Pectoral'), ('4', 'Liver'), ('5', 'Heart'), ('6', 'Kidney'), ('7', 'Gonad'), ('8', 'Fat - depot storage'), ('9', 'Biopsy - gen'), ('B', 'Brain'), ('D', 'A-Tract contents'), ('D2', 'Faecal matter'), ('E', 'Epibiota'), ('EGGs', 'Eggs'), ('K', 'Keratin - Fnail'), ('S', 'Skeletal'), ('W', 'Whole animal')], max_length=8)),
                ('label', models.CharField(blank=True, max_length=64, null=True)),
                ('sample_date', models.DateField(blank=True, null=True)),
                ('arsenic', models.FloatField(blank=True, null=True)),
                ('selenium', models.FloatField(blank=True, null=True)),
                ('zinc', models.FloatField(blank=True, null=True)),
                ('cadmium', models.FloatField(blank=True, null=True)),
                ('copper', models.FloatField(blank=True, null=True)),
                ('lead', models.FloatField(blank=True, null=True)),
                ('mercury', models.FloatField(blank=True, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('observation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='samples', to='tagging.turtleobservation')),
            ],
        ),
        migrations.CreateModel(
            name='TurtlePitTagObservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, choices=[('A1', 'Applied new - Read OK'), ('AE', 'Applied new - Did not read'), ('N', 'Not Recorded'), ('P', 'Present Obs - & Read OK'), ('P_OK', 'Present Obs - OK fix & Read'), ('PX', 'Present Obs - Tag#s not read'), ('RQ', 'Insecure at Obs - Action ??')], max_length=8, null=True)),
                ('position', models.CharField(blank=True, choices=[('LF', 'Left front'), ('RF', 'Right front'), ('LR', 'Left rear'), ('RR', 'Right rear'), ('Other', 'Other')], max_length=8, null=True)),
                ('checked', models.BooleanField(null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('observation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pit_tag_observations', to='tagging.turtleobservation')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='observations', to='tagging.turtlepittag')),
            ],
        ),
        migrations.CreateModel(
            name='TurtleIdentification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identification_type', models.CharField(choices=[('A', 'Qld - monel A series tag'), ('Acoustic', 'Acoustic'), ('ATLANTIS', 'Atlantis [now closed]'), ('CA', 'CofAust - titanium tag'), ('CT', 'Cayman - juvenile tag'), ('CTD', 'Conductivity - Temp - Depth SRDL'), ('ENT/REL', 'Untagged turtle - live release from entanglement'), ('ENT/SAL', 'Untagged turtle - salvage from entanglement'), ('FISH/DECD', 'Untagged turtle - Fishery capture victim'), ('FREE/OBS', 'Untagged turtle - live obs'), ('I', 'HIMB - Inconel tag'), ('K', 'Qld - titanium K series tag'), ('PTT', 'PT transmitter'), ('PZ ID', 'Perth Zoo Vets - case ID'), ('RREC', 'Naragebup rehab'), ('SFU/FIU', 'RotoTag'), ('SRDL', 'Satellite Relay Data Logger (SRDL)/?CATS-SATags'), ('STRAND/SAL', 'Untagged turtle - stranding victim'), ('T', 'Qld - titanium T series tag'), ('UWW', 'Underwater World [now AQWA]'), ('WAMusR', 'WA Museum R#'), ('A', 'Qld - monel A series tag'), ('Acoustic', 'Acoustic'), ('ATLANTIS', 'Atlantis [now closed]'), ('CA', 'CofAust - titanium tag'), ('CT', 'Cayman - juvenile tag'), ('CTD', 'Conductivity - Temp - Depth SRDL'), ('ENT/REL', 'Untagged turtle - live release from entanglement'), ('ENT/SAL', 'Untagged turtle - salvage from entanglement'), ('FISH/DECD', 'Untagged turtle - Fishery capture victim'), ('FREE/OBS', 'Untagged turtle - live obs'), ('I', 'HIMB - Inconel tag'), ('K', 'Qld - titanium K series tag'), ('PTT', 'PT transmitter'), ('PZ ID', 'Perth Zoo Vets - case ID'), ('RREC', 'Naragebup rehab'), ('SFU/FIU', 'RotoTag'), ('SRDL', 'Satellite Relay Data Logger (SRDL)/?CATS-SATags'), ('STRAND/SAL', 'Untagged turtle - stranding victim'), ('T', 'Qld - titanium T series tag'), ('UWW', 'Underwater World [now AQWA]'), ('WAMusR', 'WA Museum R#')], max_length=32)),
                ('identifier', models.CharField(max_length=64)),
                ('comments', models.TextField(blank=True, null=True)),
                ('turtle', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.turtle')),
            ],
        ),
        migrations.CreateModel(
            name='TurtleDamage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_part', models.CharField(choices=[('A', 'Carapace - entire'), ('B', 'Left front flipper'), ('C', 'Right front flipper'), ('D', 'Left rear flipper'), ('E', 'Right rear flipper'), ('H', 'Head'), ('I', 'Center mid-carapace'), ('J', 'Right front carapace'), ('K', 'Left front carapace'), ('L', 'Left rear carapace'), ('M', 'Right rear carapace'), ('N', 'Front mid-carapace'), ('O', 'Rear mid-carapace'), ('P', 'Plastron - entire'), ('T', 'Tail'), ('W', 'Whole animal')], max_length=4)),
                ('damage', models.CharField(choices=[('0', 'None significant'), ('1', 'Tip off - Flipper'), ('2', 'Lost from Nail - Flipper'), ('3', 'Lost half - Flipper'), ('4', 'Lost whole - Flipper'), ('5', 'Minor Wounds or cuts'), ('6', 'Major Wounds or cuts'), ('7', 'Deformity')], max_length=4)),
                ('cause', models.CharField(blank=True, choices=[('AG', 'Thick algae'), ('BB', 'Barnacles'), ('BP', 'Bite from predator'), ('BT', 'Bite from turtle'), ('MM', 'Thick mud'), ('OI', 'Other Impact'), ('PS', 'Parasites (other than barnacles)'), ('SD', 'Strike damage')], max_length=4, null=True)),
                ('comments', models.TextField(blank=True, null=True)),
                ('observation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='damage', to='tagging.turtleobservation')),
            ],
            options={
                'verbose_name_plural': 'turtle damage',
            },
        ),
        migrations.AddField(
            model_name='turtle',
            name='species',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tagging.turtlespecies'),
        ),
        migrations.CreateModel(
            name='TurtleMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('comments', models.TextField(blank=True, null=True)),
                ('measurement_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.measurementtype')),
                ('observation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tagging.turtleobservation')),
            ],
            options={
                'unique_together': {('observation', 'measurement_type')},
            },
        ),
    ]
