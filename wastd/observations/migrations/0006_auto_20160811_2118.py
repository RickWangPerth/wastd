# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2016-08-11 13:18
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('observations', '0005_auto_20160811_1435'),
    ]

    operations = [
        migrations.AddField(
            model_name='turtlenestobservation',
            name='air_temp',
            field=models.FloatField(blank=True, help_text='The air temperature in degree Celsius.', null=True, verbose_name='Air temperature'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='egg_temp',
            field=models.FloatField(blank=True, help_text='The egg temperature in degree Celsius.', null=True, verbose_name='Egg temperature'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='nest_depth_bottom',
            field=models.PositiveIntegerField(blank=True, help_text='The depth of the lowest eggs in mm.', null=True, verbose_name='Nest depth (bottom) mm'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='nest_depth_top',
            field=models.PositiveIntegerField(blank=True, help_text='The depth of sand above the eggs in mm.', null=True, verbose_name='Nest depth (top) mm'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='no_dead_embryos',
            field=models.PositiveIntegerField(blank=True, help_text='The number of dead embryos in the nest.', null=True, verbose_name='Dead embryos'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='no_dead_full_term_embryos',
            field=models.PositiveIntegerField(blank=True, help_text='The number of dead full term embryos in the nest.', null=True, verbose_name='Dead full term embryos'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='no_dead_hatchlings',
            field=models.PositiveIntegerField(blank=True, help_text='The number of dead hatchlings in the nest.', null=True, verbose_name='Dead hatchlings'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='no_depredated_eggs',
            field=models.PositiveIntegerField(blank=True, help_text='The number of depredated eggs in the nest.', null=True, verbose_name='Depredated eggs`'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='no_egg_shells',
            field=models.PositiveIntegerField(blank=True, help_text='The number of egg shells in the nest.', null=True, verbose_name='Egg shells'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='no_live_hatchlings',
            field=models.PositiveIntegerField(blank=True, help_text='The number of in the nest.', null=True, verbose_name='Live hatchlings'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='no_undeveloped_eggs',
            field=models.PositiveIntegerField(blank=True, help_text='The number of undeveloped eggs in the nest.', null=True, verbose_name='Undeveloped eggs'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='no_unfertilized',
            field=models.PositiveIntegerField(blank=True, help_text='The number of unfertilized eggs in the nest.', null=True, verbose_name='Unfertilized eggs'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='no_yolkless_eggs',
            field=models.PositiveIntegerField(blank=True, help_text='The number of yolkless eggs in the nest.', null=True, verbose_name='Yolkless eggs'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='sand_temp',
            field=models.FloatField(blank=True, help_text='The sand temperature in degree Celsius.', null=True, verbose_name='Sand temperature'),
        ),
        migrations.AddField(
            model_name='turtlenestobservation',
            name='water_temp',
            field=models.FloatField(blank=True, help_text='The water temperature in degree Celsius.', null=True, verbose_name='Water temperature'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='habitat',
            field=models.CharField(choices=[('na', 'not observed'), ('beach', 'Beach: Below the vegetation line of the grass slope'), ('bays-estuaries', 'Bays, estuaries and other enclosed shallow soft sediments'), ('dune', 'Dune'), ('dune-constructed-hard-substrate', 'Dune: Constructed hard substrate (concrete slabs, timber floors, helipad)'), ('dune-grass-area', 'Dune: Grass area'), ('dune-compacted-path', 'Dune: Hard compacted areas (road ways, paths)'), ('dune-rubble', 'Dune: Rubble, usually coral'), ('dune-bare-sand', 'Dune: Bare sand area'), ('dune-beneath-vegetation', 'Dune: Beneath tree or shrub'), ('slope-front-dune', 'Slope: Front slope of dune'), ('sand-flats', 'Sand flats'), ('slope-grass', 'Slope: Grass area'), ('slope-bare-sand', 'Slope: Bare sand area'), ('slope-beneath-vegetation', 'Slope: Beneath tree or shrub'), ('below-mean-spring-high-water-mark', 'Below the mean spring high water line or current level of inundation'), ('lagoon-patch-reef', 'Lagoon: Patch reef'), ('lagoon-open-sand', 'Lagoon: Open sand areas, typically shallow'), ('mangroves', 'Mangroves'), ('reef-coral', 'Reef: Coral reef'), ('reef-crest-front-slope', 'Reef: Reef crest (dries at low water) and front reef slope areas'), ('reef-flat', 'Reef: Reef flat, dries at low tide'), ('reef-seagrass-flats', 'Coral reef with seagrass flats'), ('reef-rocky', 'Reef: Rocky reef, e.g. adjacent to mainland'), ('open-water', 'Open water, including inter reefal areas')], default='na', help_text='The habitat in which the animal was encountered.', max_length=500, verbose_name='Habitat'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='maturity',
            field=models.CharField(choices=[('na', 'not observed'), ('hatchling', 'hatchling'), ('post-hatchling', 'post-hatchling'), ('juvenile', 'juvenile'), ('pre-pubsecent-immature', 'pre-pubsecent immature'), ('pubsecent-immature', 'pubsecent immature'), ('adult-measured', 'adult (status determined from carapace and tail measurements)'), ('unweaned', 'unweaned immature'), ('weaned', 'weaned immature'), ('adult', 'adult'), ('unknown', 'unknown maturity')], default='na', help_text="The animal's maturity.", max_length=300, verbose_name='Maturity'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='sex',
            field=models.CharField(choices=[('na', 'not observed'), ('male', 'male'), ('female', 'female'), ('intersex', 'hermaphrodite or intersex')], default='na', help_text="The animal's sex.", max_length=300, verbose_name='Sex'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='taxon',
            field=models.CharField(choices=[('na', 'not observed'), ('Cheloniidae', 'Marine turtles'), ('Cetacea', 'Whales and Dolphins'), ('Pinnipedia', 'Pinnipeds'), ('Sirenia', 'Dugongs'), ('Elasmobranchii', 'Sharks and Rays')], default='na', help_text='The taxonomic group of the animal.', max_length=300, verbose_name='Taxonomic group'),
        ),
        migrations.AlterField(
            model_name='distinguishingfeatureobservation',
            name='algal_growth',
            field=models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Algal growth on carapace'),
        ),
        migrations.AlterField(
            model_name='distinguishingfeatureobservation',
            name='barnacles',
            field=models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Barnacles'),
        ),
        migrations.AlterField(
            model_name='distinguishingfeatureobservation',
            name='damage_injury',
            field=models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Obvious damage or injuries'),
        ),
        migrations.AlterField(
            model_name='distinguishingfeatureobservation',
            name='missing_limbs',
            field=models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Missing limbs'),
        ),
        migrations.AlterField(
            model_name='distinguishingfeatureobservation',
            name='propeller_damage',
            field=models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Propeller strike damage'),
        ),
        migrations.AlterField(
            model_name='distinguishingfeatureobservation',
            name='scanned_for_pit_tags',
            field=models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Scanned for PIT tags'),
        ),
        migrations.AlterField(
            model_name='distinguishingfeatureobservation',
            name='tagging_scars',
            field=models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Tagging scars'),
        ),
        migrations.AlterField(
            model_name='encounter',
            name='location_accuracy',
            field=models.CharField(choices=[('10', 'GPS reading at exact location (10 m)'), ('1000', 'Location name (1 km)'), ('10000', 'Rough estimate (10 km)'), ('online-map', 'Drawn on online map')], default='1000', help_text='The accuracy of the supplied location.', max_length=300, verbose_name='Location accuracy'),
        ),
        migrations.AlterField(
            model_name='encounter',
            name='when',
            field=models.DateTimeField(help_text='The observation datetime, shown as local time (no daylight savings), stored as UTC.', verbose_name='Observed on'),
        ),
        migrations.AlterField(
            model_name='mediaattachment',
            name='media_type',
            field=models.CharField(choices=[('data_sheet', 'Data sheet'), ('communication', 'Communication record'), ('photograph', 'Photograph'), ('other', 'Other')], default='photograph', help_text='What is the attached file about?', max_length=300, verbose_name='Attachment type'),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='habitat',
            field=models.CharField(choices=[('na', 'not observed'), ('beach', 'Beach: Below the vegetation line of the grass slope'), ('bays-estuaries', 'Bays, estuaries and other enclosed shallow soft sediments'), ('dune', 'Dune'), ('dune-constructed-hard-substrate', 'Dune: Constructed hard substrate (concrete slabs, timber floors, helipad)'), ('dune-grass-area', 'Dune: Grass area'), ('dune-compacted-path', 'Dune: Hard compacted areas (road ways, paths)'), ('dune-rubble', 'Dune: Rubble, usually coral'), ('dune-bare-sand', 'Dune: Bare sand area'), ('dune-beneath-vegetation', 'Dune: Beneath tree or shrub'), ('slope-front-dune', 'Slope: Front slope of dune'), ('sand-flats', 'Sand flats'), ('slope-grass', 'Slope: Grass area'), ('slope-bare-sand', 'Slope: Bare sand area'), ('slope-beneath-vegetation', 'Slope: Beneath tree or shrub'), ('below-mean-spring-high-water-mark', 'Below the mean spring high water line or current level of inundation'), ('lagoon-patch-reef', 'Lagoon: Patch reef'), ('lagoon-open-sand', 'Lagoon: Open sand areas, typically shallow'), ('mangroves', 'Mangroves'), ('reef-coral', 'Reef: Coral reef'), ('reef-crest-front-slope', 'Reef: Reef crest (dries at low water) and front reef slope areas'), ('reef-flat', 'Reef: Reef flat, dries at low tide'), ('reef-seagrass-flats', 'Coral reef with seagrass flats'), ('reef-rocky', 'Reef: Rocky reef, e.g. adjacent to mainland'), ('open-water', 'Open water, including inter reefal areas')], default='na', help_text='The habitat in which the nest was encountered.', max_length=500, verbose_name='Habitat'),
        ),
    ]
