# -*- coding: utf-8 -*-
# Generated by Django 1.9.10 on 2016-09-29 23:50
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('observations', '0016_auto_20160922_1227'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='turtlemorphometricobservation',
            name='curved_carapace_notch_accuracy',
        ),
        migrations.RemoveField(
            model_name='turtlemorphometricobservation',
            name='curved_carapace_notch_mm',
        ),
        migrations.AddField(
            model_name='turtlemorphometricobservation',
            name='maximum_head_length_accuracy',
            field=models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='na', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Maximum head length accuracy'),
        ),
        migrations.AddField(
            model_name='turtlemorphometricobservation',
            name='maximum_head_length_mm',
            field=models.PositiveIntegerField(blank=True, help_text='The maximum head length in millimetres.', null=True, verbose_name='Maximum head length (mm)'),
        ),
        migrations.AddField(
            model_name='turtlemorphometricobservation',
            name='straight_carapace_length_accuracy',
            field=models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='na', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Straight carapace length accuracy'),
        ),
        migrations.AddField(
            model_name='turtlemorphometricobservation',
            name='straight_carapace_length_mm',
            field=models.PositiveIntegerField(blank=True, help_text='The straight carapace length in millimetres.', null=True, verbose_name='Straight carapace length (mm)'),
        ),
        migrations.AddField(
            model_name='turtlemorphometricobservation',
            name='tail_length_plastron_accuracy',
            field=models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='na', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Tail length from plastron accuracy'),
        ),
        migrations.AddField(
            model_name='turtlemorphometricobservation',
            name='tail_length_plastron_mm',
            field=models.PositiveIntegerField(blank=True, help_text='The tail length in millimetres, measured from plastron to tip.', null=True, verbose_name='Tail length from plastron (mm)'),
        ),
        migrations.AddField(
            model_name='turtlemorphometricobservation',
            name='tail_length_vent_accuracy',
            field=models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='na', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Tail Length Accuracy'),
        ),
        migrations.AddField(
            model_name='turtlemorphometricobservation',
            name='tail_length_vent_mm',
            field=models.PositiveIntegerField(blank=True, help_text='The tail length in millimetres, measured from vent to tip.', null=True, verbose_name='Tail length from vent (mm)'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='behaviour',
            field=models.TextField(blank=True, help_text='Notes on condition or behaviour.', null=True, verbose_name='Condition and behaviour'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='cause_of_death',
            field=models.CharField(choices=[('na', 'not observed'), ('indeterminate-decomposed', 'Indeterminate due to decomposition'), ('boat-strike', 'Boat strike'), ('drowned-entangled-fisheries', 'Drowned entangled in fisheries equipment'), ('drowned-entangled-infrastructure', 'Drowned entangled in infrastructure'), ('drowned-entangled-debris', 'Drowned entangled in debris'), ('drowned-entangled', 'Drowned entangled'), ('drowned-other', 'Drowned'), ('fishery-bycatch', 'Fishery bycatch'), ('handling-accident', 'Handling accident'), ('car-collision', 'Car collision'), ('ingested-debris', 'Ingested debris'), ('harvest', 'Harvested for human consumption'), ('poisoned', 'Poisoned'), ('misorientation', 'Misorientation on beach'), ('natural', 'Natural death'), ('predation', 'Predation')], default='na', help_text='If dead, is the case of death known?', max_length=300, verbose_name='Cause of death'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='cause_of_death_confidence',
            field=models.CharField(choices=[('na', 'not observed'), ('guess', 'Guess based on insuffient evidence'), ('expert-opinion', 'Expert opinion based on available evidence'), ('validated', 'Validated by authoritative source')], default='na', help_text='What is the cause of death, if known, based on?', max_length=300, verbose_name='Cause of death confidence'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='checked_for_flipper_tags',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='Was the animal checked for flipper tags, were any found?', max_length=300, verbose_name='Checked for flipper tags'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='checked_for_injuries',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='Was the animal checked for injuries, were any found?', max_length=300, verbose_name='Checked for injuries'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='habitat',
            field=models.CharField(choices=[('na', 'unknown habitat'), ('beach-below-high-water', 'beach below high water mark'), ('beach-above-high-water', 'beach between high water mark and dune'), ('beach-edge-of-vegetation', 'edge of dune and vegetation'), ('in-dune-vegetation', 'inside dune and vegetation'), ('beach', 'beach (below vegetation line)'), ('bays-estuaries', 'bays, estuaries and other enclosed shallow soft sediments'), ('dune', 'dune'), ('dune-constructed-hard-substrate', 'dune, constructed hard substrate (concrete slabs, timber floors, helipad)'), ('dune-grass-area', 'dune, grass area'), ('dune-compacted-path', 'dune, hard compacted areas (road ways, paths)'), ('dune-rubble', 'dune, rubble, usually coral'), ('dune-bare-sand', 'dune, bare sand area'), ('dune-beneath-vegetation', 'dune, beneath tree or shrub'), ('slope-front-dune', 'dune, front slope'), ('sand-flats', 'sand flats'), ('slope-grass', 'slope, grass area'), ('slope-bare-sand', 'slope, bare sand area'), ('slope-beneath-vegetation', 'slope, beneath tree or shrub'), ('below-mean-spring-high-water-mark', 'below the mean spring high water line or current level of inundation'), ('lagoon-patch-reef', 'lagoon, patch reef'), ('lagoon-open-sand', 'lagoon, open sand areas'), ('mangroves', 'mangroves'), ('reef-coral', 'coral reef'), ('reef-crest-front-slope', 'reef crest (dries at low water) and front reef slope areas'), ('reef-flat', 'reef flat, dries at low tide'), ('reef-seagrass-flats', 'coral reef with seagrass flats'), ('reef-rocky', 'rocky reef'), ('open-water', 'open water')], default='na', help_text='The habitat in which the animal was encountered.', max_length=500, verbose_name='Habitat'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='scanned_for_pit_tags',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='Was the animal scanned for PIT tags, were any found?', max_length=300, verbose_name='Scanned for PIT tags'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='species',
            field=models.CharField(choices=[('na', 'not observed'), ('Natator depressus', 'Natator depressus (Flatback turtle)'), ('Chelonia mydas', 'Chelonia mydas (Green turtle)'), ('Eretmochelys imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('Caretta caretta', 'Caretta caretta (Loggerhead turtle)'), ('Lepidochelys olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('Dermochelys coriacea', 'Leatherback turtle (Dermochelys coriacea)'), ('Chelonia mydas agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('Corolla corolla', 'Corolla corolla (Hatchback turtle)'), ('unidentified-turtle', 'Unidentified turtle'), ('Delphinus delphis', 'Delphinus delphis (Short-beaked common dolphin)'), ('Grampus griseus', "Grampus griseus (Risso's dolphin)"), ('Lagenodelphis hosei', "Lagenodelphis hosei (Fraser's dolphin)"), ('Lagenorhynchus obscurus', 'Lagenorhynchus obscurus (Dusky dolphin)'), ('Orcaella heinsohni', 'Orcaella heinsohni (Australian snubfin dolphin)'), ('Sousa sahulensis', 'Sousa sahulensis (Australian humpback dolphin)'), ('Stenella attenuata', 'Stenella attenuata (Pantropical spotted dolphin)'), ('Stenella coeruleoalba', 'Stenella coeruleoalba (Striped dolphin)'), ('Stenella longirostris', 'Stenella longirostris (Spinner dolphin)'), ('Stenella sp.', 'Stenella sp. (Unidentified spotted dolphin)'), ('Steno bredanensis', 'Steno bredanensis (Rough-toothed dolphin)'), ('Tursiops aduncus', 'Tursiops aduncus (Indo-Pacific bottlenose dolphin)'), ('Tursiops truncatus', 'Tursiops truncatus (Offshore bottlenose dolphin)'), ('Tursiops sp.', 'Tursiops sp. (Unidentified bottlenose dolphin)'), ('unidentified-dolphin', 'Unidentified dolphin'), ('Balaenoptera acutorostrata', 'Balaenoptera acutorostrata (Dwarf minke whale)'), ('Balaenoptera bonaerensis', 'Balaenoptera bonaerensis (Antarctic minke whale)<'), ('Balaenoptera borealis', 'Balaenoptera borealis (Sei whale)'), ('Balaenoptera edeni', "Balaenoptera edeni (Bryde's whale)"), ('Balaenoptera musculus', 'Balaenoptera musculus (Blue whale)'), ('Balaenoptera musculus brevicauda', 'Balaenoptera musculus brevicauda (Pygmy blue whale)'), ('Balaenoptera physalus', 'Balaenoptera physalus (Fin whale)'), ('Balaenoptera sp.', 'Balaenoptera sp. (Unidentified Balaenoptera)'), ('Eubalaena australis', 'Eubalaena australis (Southern right whale)'), ('Feresa attenuata', 'Feresa attenuata (Pygmy killer whale)'), ('Globicephala macrorhynchus', 'Globicephala macrorhynchus (Short-finned pilot whale)'), ('Globicephala melas', 'Globicephala melas (Long-finned pilot whale)'), ('Globicephala sp.', 'Globicephala sp. (Unidentified pilot whale)'), ('Indopacetus pacificus', "Indopacetus pacificus (Longman's beaked whale)"), ('Kogia breviceps', 'Kogia breviceps (Pygmy sperm whale)'), ('Kogia sima', 'Kogia sima (Dwarf sperm whale)'), ('Kogia sp.', 'Kogia sp. (Unidentified small sperm whale)'), ('Megaptera novaeangliae', 'Megaptera novaeangliae (Humpback whale)'), ('Mesoplodon densirostris', "Mesoplodon densirostris (Blainville's beaked whale)"), ('Mesoplodon layardii', 'Mesoplodon layardii (Strap-toothed whale)'), ('Mesoplodon sp.', 'Mesoplodon sp. (Beaked whale)'), ('Orcinus orca', 'Orcinus orca (Killer whale)'), ('Peponocephala electra', 'Peponocephala electra (Melon-headed whale)'), ('Physeter macrocephalus', 'Physeter macrocephalus (Sperm whale)'), ('Pseudorca crassidens', 'Pseudorca crassidens (False killer whale)'), ('Ziphius cavirostris', "Ziphius cavirostris (Cuvier's beaked whale)"), ('unidentified-whale', 'Unidentified whale'), ('hydrophiinae-subfam', 'Hydrophiinae subfam. (Sea snakes and kraits)'), ('acalyptophis-sp', 'Acalyptophis sp. (Horned sea snake)'), ('aipysurus-sp', 'Aipysurus sp. (Olive sea snake)'), ('astrotia-sp', "Astrotia sp. (Stokes' sea snake)"), ('emydocephalus-sp', 'Emydocephalus sp. (Turtlehead sea snake)'), ('enhydrina-sp', 'Enhydrina sp. (Beaked sea snake)'), ('ephalophis-sp', "Ephalophis sp. (Grey's mudsnake)"), ('hydrelaps-sp', 'Hydrelaps sp. (Port Darwin mudsnake)'), ('hydrophis-sp', 'Hydrophis sp. (sea snake)'), ('kerilia-sp', "Kerilia sp. (Jerdon's sea snake)"), ('kolpophis-sp', 'Kolpophis sp. (bighead sea snake)'), ('lapemis-sp', "Lapemis sp. (Shaw's sea snake)"), ('laticauda-sp', 'Laticauda sp. (Sea krait)'), ('parahydrophis-sp', 'Parahydrophis (Northern mangrove sea snake)'), ('parapistocalamus-sp', "Parapistocalamus sp. (Hediger's snake)"), ('pelamis-sp', 'Pelamis sp. (Yellow-bellied sea snake)'), ('praescutata-sp', 'Praescutata sp. (Sea snake)'), ('thalassophis-sp', 'Thalassophis sp. (Sea snake)')], default='unidentified', help_text='The species of the animal.', max_length=300, verbose_name='Species'),
        ),
        migrations.AlterField(
            model_name='animalencounter',
            name='taxon',
            field=models.CharField(choices=[('na', 'not observed'), ('Cheloniidae', 'Marine turtles'), ('Cetacea', 'Whales and Dolphins'), ('Pinnipedia', 'Pinnipeds'), ('Sirenia', 'Dugongs'), ('Elasmobranchii', 'Sharks and Rays'), ('Hydrophiinae', 'Sea snakes and kraits')], default='Cheloniidae', help_text='The taxonomic group of the animal.', max_length=300, verbose_name='Taxonomic group'),
        ),
        migrations.AlterField(
            model_name='tagobservation',
            name='tag_type',
            field=models.CharField(choices=[('flipper-tag', 'Flipper Tag'), ('pit-tag', 'PIT Tag'), ('sat-tag', 'Satellite Relay Data Logger'), ('data-logger', 'Data Logger'), ('blood-sample', 'Blood Sample'), ('biopsy-sample', 'Biopsy Sample'), ('stomach-content-sample', 'Stomach Content Sample'), ('physical-sample', 'Physical Sample'), ('egg-sample', 'Egg Sample'), ('temperature-logger', 'Temperature Logger'), ('qld-monel-a-flipper-tag', 'QLD Monel Series A flipper tag'), ('qld-titanium-k-flipper-tag', 'QLD Titanium Series K flipper tag'), ('qld-titanium-t-flipper-tag', 'QLD Titanium Series T flipper tag'), ('acoustic-tag', 'Acoustic tag'), ('commonwealth-titanium-flipper-tag', 'Commonwealth titanium flipper tag'), ('cayman-juvenile-tag', 'Cayman juvenile tag'), ('ctd-data-logger', 'Conductivity, Temperature, Depth SR data logger'), ('hawaii-inconel-flipper-tag', 'Hawaii Inst Mar Biol Inconel tag'), ('ptt', 'Platform Transmitter Terminal (PTT)'), ('rototag', 'RotoTag'), ('narangebub-nickname', 'Narangebup rehab informal name'), ('aqwa-nickname', 'AQWA informal name'), ('atlantis-nickname', 'Atlantis informal name'), ('wa-museum-reptile-registration-number', 'WA Museum Natural History Reptiles Catalogue Registration Number'), ('other', 'Other')], default='flipper-tag', help_text='What kind of tag is it?', max_length=300, verbose_name='Tag type'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='bird_predation',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Bird predation'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='croc_predation',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Crocodile predation'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='dingo_predation',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Dingo predation'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='dog_predation',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Dog predation'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='fox_predation',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Fox predation'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='goanna_predation',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Goanna predation'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='curved_carapace_length_accuracy',
            field=models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='na', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Curved carapace length accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='curved_carapace_length_mm',
            field=models.PositiveIntegerField(blank=True, help_text='The curved carapace length in millimetres.', null=True, verbose_name='Curved carapace length (mm)'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='curved_carapace_width_accuracy',
            field=models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='na', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Curved carapace width accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='curved_carapace_width_mm',
            field=models.PositiveIntegerField(blank=True, help_text='Curved carapace width in millimetres.', null=True, verbose_name='Curved Carapace Width (mm)'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='maximum_head_width_accuracy',
            field=models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='na', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Maximum head width accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='maximum_head_width_mm',
            field=models.PositiveIntegerField(blank=True, help_text='The maximum head width in millimetres.', null=True, verbose_name='Maximum head width (mm)'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='tail_length_accuracy',
            field=models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='na', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Tail length from carapace accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='tail_length_mm',
            field=models.PositiveIntegerField(blank=True, help_text='The tail length in millimetres, measured from carapace to tip.', null=True, verbose_name='Tail length from carapace (mm)'),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='habitat',
            field=models.CharField(choices=[('na', 'unknown habitat'), ('beach-below-high-water', 'beach below high water mark'), ('beach-above-high-water', 'beach between high water mark and dune'), ('beach-edge-of-vegetation', 'edge of dune and vegetation'), ('in-dune-vegetation', 'inside dune and vegetation'), ('beach', 'beach (below vegetation line)'), ('bays-estuaries', 'bays, estuaries and other enclosed shallow soft sediments'), ('dune', 'dune'), ('dune-constructed-hard-substrate', 'dune, constructed hard substrate (concrete slabs, timber floors, helipad)'), ('dune-grass-area', 'dune, grass area'), ('dune-compacted-path', 'dune, hard compacted areas (road ways, paths)'), ('dune-rubble', 'dune, rubble, usually coral'), ('dune-bare-sand', 'dune, bare sand area'), ('dune-beneath-vegetation', 'dune, beneath tree or shrub'), ('slope-front-dune', 'dune, front slope'), ('sand-flats', 'sand flats'), ('slope-grass', 'slope, grass area'), ('slope-bare-sand', 'slope, bare sand area'), ('slope-beneath-vegetation', 'slope, beneath tree or shrub'), ('below-mean-spring-high-water-mark', 'below the mean spring high water line or current level of inundation'), ('lagoon-patch-reef', 'lagoon, patch reef'), ('lagoon-open-sand', 'lagoon, open sand areas'), ('mangroves', 'mangroves'), ('reef-coral', 'coral reef'), ('reef-crest-front-slope', 'reef crest (dries at low water) and front reef slope areas'), ('reef-flat', 'reef flat, dries at low tide'), ('reef-seagrass-flats', 'coral reef with seagrass flats'), ('reef-rocky', 'rocky reef'), ('open-water', 'open water')], default='na', help_text='The habitat in which the nest was encountered.', max_length=500, verbose_name='Habitat'),
        ),
        migrations.AlterField(
            model_name='turtlenestencounter',
            name='species',
            field=models.CharField(choices=[('na', 'not observed'), ('Natator depressus', 'Natator depressus (Flatback turtle)'), ('Chelonia mydas', 'Chelonia mydas (Green turtle)'), ('Eretmochelys imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('Caretta caretta', 'Caretta caretta (Loggerhead turtle)'), ('Lepidochelys olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('Dermochelys coriacea', 'Leatherback turtle (Dermochelys coriacea)'), ('Chelonia mydas agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('Corolla corolla', 'Corolla corolla (Hatchback turtle)'), ('unidentified-turtle', 'Unidentified turtle'), ('Delphinus delphis', 'Delphinus delphis (Short-beaked common dolphin)'), ('Grampus griseus', "Grampus griseus (Risso's dolphin)"), ('Lagenodelphis hosei', "Lagenodelphis hosei (Fraser's dolphin)"), ('Lagenorhynchus obscurus', 'Lagenorhynchus obscurus (Dusky dolphin)'), ('Orcaella heinsohni', 'Orcaella heinsohni (Australian snubfin dolphin)'), ('Sousa sahulensis', 'Sousa sahulensis (Australian humpback dolphin)'), ('Stenella attenuata', 'Stenella attenuata (Pantropical spotted dolphin)'), ('Stenella coeruleoalba', 'Stenella coeruleoalba (Striped dolphin)'), ('Stenella longirostris', 'Stenella longirostris (Spinner dolphin)'), ('Stenella sp.', 'Stenella sp. (Unidentified spotted dolphin)'), ('Steno bredanensis', 'Steno bredanensis (Rough-toothed dolphin)'), ('Tursiops aduncus', 'Tursiops aduncus (Indo-Pacific bottlenose dolphin)'), ('Tursiops truncatus', 'Tursiops truncatus (Offshore bottlenose dolphin)'), ('Tursiops sp.', 'Tursiops sp. (Unidentified bottlenose dolphin)'), ('unidentified-dolphin', 'Unidentified dolphin'), ('Balaenoptera acutorostrata', 'Balaenoptera acutorostrata (Dwarf minke whale)'), ('Balaenoptera bonaerensis', 'Balaenoptera bonaerensis (Antarctic minke whale)<'), ('Balaenoptera borealis', 'Balaenoptera borealis (Sei whale)'), ('Balaenoptera edeni', "Balaenoptera edeni (Bryde's whale)"), ('Balaenoptera musculus', 'Balaenoptera musculus (Blue whale)'), ('Balaenoptera musculus brevicauda', 'Balaenoptera musculus brevicauda (Pygmy blue whale)'), ('Balaenoptera physalus', 'Balaenoptera physalus (Fin whale)'), ('Balaenoptera sp.', 'Balaenoptera sp. (Unidentified Balaenoptera)'), ('Eubalaena australis', 'Eubalaena australis (Southern right whale)'), ('Feresa attenuata', 'Feresa attenuata (Pygmy killer whale)'), ('Globicephala macrorhynchus', 'Globicephala macrorhynchus (Short-finned pilot whale)'), ('Globicephala melas', 'Globicephala melas (Long-finned pilot whale)'), ('Globicephala sp.', 'Globicephala sp. (Unidentified pilot whale)'), ('Indopacetus pacificus', "Indopacetus pacificus (Longman's beaked whale)"), ('Kogia breviceps', 'Kogia breviceps (Pygmy sperm whale)'), ('Kogia sima', 'Kogia sima (Dwarf sperm whale)'), ('Kogia sp.', 'Kogia sp. (Unidentified small sperm whale)'), ('Megaptera novaeangliae', 'Megaptera novaeangliae (Humpback whale)'), ('Mesoplodon densirostris', "Mesoplodon densirostris (Blainville's beaked whale)"), ('Mesoplodon layardii', 'Mesoplodon layardii (Strap-toothed whale)'), ('Mesoplodon sp.', 'Mesoplodon sp. (Beaked whale)'), ('Orcinus orca', 'Orcinus orca (Killer whale)'), ('Peponocephala electra', 'Peponocephala electra (Melon-headed whale)'), ('Physeter macrocephalus', 'Physeter macrocephalus (Sperm whale)'), ('Pseudorca crassidens', 'Pseudorca crassidens (False killer whale)'), ('Ziphius cavirostris', "Ziphius cavirostris (Cuvier's beaked whale)"), ('unidentified-whale', 'Unidentified whale'), ('hydrophiinae-subfam', 'Hydrophiinae subfam. (Sea snakes and kraits)'), ('acalyptophis-sp', 'Acalyptophis sp. (Horned sea snake)'), ('aipysurus-sp', 'Aipysurus sp. (Olive sea snake)'), ('astrotia-sp', "Astrotia sp. (Stokes' sea snake)"), ('emydocephalus-sp', 'Emydocephalus sp. (Turtlehead sea snake)'), ('enhydrina-sp', 'Enhydrina sp. (Beaked sea snake)'), ('ephalophis-sp', "Ephalophis sp. (Grey's mudsnake)"), ('hydrelaps-sp', 'Hydrelaps sp. (Port Darwin mudsnake)'), ('hydrophis-sp', 'Hydrophis sp. (sea snake)'), ('kerilia-sp', "Kerilia sp. (Jerdon's sea snake)"), ('kolpophis-sp', 'Kolpophis sp. (bighead sea snake)'), ('lapemis-sp', "Lapemis sp. (Shaw's sea snake)"), ('laticauda-sp', 'Laticauda sp. (Sea krait)'), ('parahydrophis-sp', 'Parahydrophis (Northern mangrove sea snake)'), ('parapistocalamus-sp', "Parapistocalamus sp. (Hediger's snake)"), ('pelamis-sp', 'Pelamis sp. (Yellow-bellied sea snake)'), ('praescutata-sp', 'Praescutata sp. (Sea snake)'), ('thalassophis-sp', 'Thalassophis sp. (Sea snake)')], default='na', help_text='The species of the animal.', max_length=300, verbose_name='Species'),
        ),
    ]
