# -*- coding: utf-8 -*-
# Generated by Django 1.9.10 on 2016-09-30 08:11
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('observations', '0021_auto_20160930_1411'),
    ]

    operations = [
        migrations.CreateModel(
            name='TurtleNestDisturbanceObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('disturbance_cause', models.CharField(choices=[('fox-predation', 'Fox predation'), ('dingo-predation', 'Dingo predation'), ('dog-predation', 'Dog predation'), ('goanna-predation', 'Goanna predation'), ('croc-predation', 'Croc predation'), ('bird-predation', 'Bird predation'), ('crab-predation', 'Crab predation'), ('turtle-disturbance', 'Turtle disturbance'), ('cyclone-disturbance', 'Cyclone disturbance'), ('tidal-disturbance', 'Tidal disturbance'), ('vehicle-damage', 'Vehicle damage'), ('harvest', 'Harvest'), ('research', 'Research'), ('poaching', 'Poaching'), ('other', 'Other (see comments)')], help_text='The cause of the disturbance.', max_length=300, verbose_name='Disturbance cause')),
                ('disturbance_cause_confidence', models.CharField(choices=[('na', 'not observed'), ('guess', 'Guess based on insuffient evidence'), ('expert-opinion', 'Expert opinion based on available evidence'), ('validated', 'Validated by authoritative source')], default='na', help_text='What is the choice of disturbance cause based on?', max_length=300, verbose_name='Disturbance cause choice confidence')),
                ('disturbance_severity', models.CharField(choices=[('nest-left-viable', 'Nest left viable'), ('nest-destroyed', 'Nest destroyed')], help_text='The impact of the disturbance on nest viability.', max_length=300, verbose_name='Disturbance severity')),
                ('comments', models.TextField(blank=True, help_text='Any other comments or notes.', null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
            },
            bases=('observations.observation',),
        ),
        migrations.AddField(
            model_name='turtlenestencounter',
            name='predation',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Evidence of predation'),
        ),
        migrations.AlterField(
            model_name='encounter',
            name='source_id',
            field=models.CharField(blank=True, help_text='The ID of the record in the original source, or a newly allocated ID if left blank. Delete and save to regenerate this ID.', max_length=1000, null=True, verbose_name='Source ID'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='bird_predation',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Bird predation'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='croc_predation',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Crocodile predation'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='dingo_predation',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Dingo predation'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='dog_predation',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Dog predation'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='fox_predation',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Fox predation'),
        ),
        migrations.AlterField(
            model_name='tracktallyobservation',
            name='goanna_predation',
            field=models.CharField(choices=[('na', 'NA'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Goanna predation'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='body_depth_accuracy',
            field=models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Body depth accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='body_weight_accuracy',
            field=models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Body weight accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='curved_carapace_length_accuracy',
            field=models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Curved carapace length accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='curved_carapace_width_accuracy',
            field=models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Curved carapace width accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='maximum_head_length_accuracy',
            field=models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Maximum head length accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='maximum_head_width_accuracy',
            field=models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Maximum head width accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='straight_carapace_length_accuracy',
            field=models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Straight carapace length accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='tail_length_carapace_accuracy',
            field=models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Tail length from carapace accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='tail_length_plastron_accuracy',
            field=models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Tail length from plastron accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlemorphometricobservation',
            name='tail_length_vent_accuracy',
            field=models.CharField(blank=True, choices=[('1', 'To nearest 1 mm'), ('5', 'To nearest 5 mm'), ('10', 'To nearest 1 cm'), ('100', 'To nearest 10 cm'), ('1000', 'To nearest 1 m or 1 kg'), ('10000', 'To nearest 10 m or 10 kg')], help_text='The expected measurement accuracy.', max_length=300, null=True, verbose_name='Tail Length Accuracy'),
        ),
        migrations.AlterField(
            model_name='turtlenestobservation',
            name='no_live_hatchlings',
            field=models.PositiveIntegerField(blank=True, help_text='The number of live hatchlings left among shells excluding those in neck of nest.', null=True, verbose_name='Live hatchlings in nest (L)'),
        ),
    ]
