# -*- coding: utf-8 -*-
# Generated by Django 1.9.8 on 2016-07-29 13:30
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DistinguishingFeature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A short name for the distinguising feature.', max_length=300, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='A description of the feature.', null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Distinguishing Feature',
                'verbose_name_plural': 'Distinguishing Features',
            },
        ),
        migrations.CreateModel(
            name='MediaAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_type', models.CharField(choices=[('data_sheet', 'Original data sheet'), ('photograph', 'Photograph'), ('other', 'Other')], default='other', help_text='What is the attached file about?', max_length=300, verbose_name='Attachment type')),
                ('title', models.CharField(blank=True, help_text='Give the attachment a representative name', max_length=300, null=True, verbose_name='Attachment name')),
                ('attachment', models.FileField(help_text='Upload the file', upload_to='media/%Y/%m/%d/', verbose_name='File attachment')),
            ],
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(help_text='The observation datetime', verbose_name='Observed on')),
                ('where', django.contrib.gis.db.models.fields.PointField(help_text='The observation location as point in WGS84', srid=4326, verbose_name='Observed at')),
            ],
            options={
                'ordering': ['when', 'where'],
                'get_latest_by': 'when',
                'verbose_name': 'Observation',
                'verbose_name_plural': 'Observations',
            },
        ),
        migrations.CreateModel(
            name='StrandingObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('species', models.CharField(choices=[('Natator depressus', 'Flatback turtle (Natator depressus)'), ('Chelonia mydas', 'Green turtle (Chelonia mydas)'), ('Eretmochelys imbricata', 'Hawksbill turtle (Eretmochelys imbricata)'), ('Caretta caretta', 'Loggerhead turtle (Caretta caretta)'), ('Lepidochelys olivacea', 'Olive Ridley turtle (Lepidochelys olivacea)'), ('Dermochelys coriacea', 'Leatherback turtle (Dermochelys coriacea)'), ('unidentified', 'Unidentified')], help_text='The species of the animal.', max_length=300, verbose_name='Species')),
                ('health', models.CharField(choices=[('alive', 'Alive, healthy'), ('alive-injured', 'Alive, injured'), ('alive-then-died', 'Initally alive, but died'), ('dead-edible', 'Dead, carcass edible'), ('dead-organs-intact', 'Dead, decomposed but organs intact'), ('dead-advanced', 'Dead, advanced decomposition'), ('dead-mummified', 'Dead, skin holding bones'), ('dead-disarticulated', 'Dead, no soft tissue remaining'), ('other', 'Other')], default='alive', help_text='On a scale from the Fresh Prince of Bel Air to 80s Hair Metal: how dead and decomposed is the animal?', max_length=300, verbose_name='Health status')),
                ('behaviour', models.TextField(blank=True, help_text='Notes on condition or behaviour if alive.', null=True, verbose_name='Behaviour')),
                ('management_actions', models.TextField(blank=True, help_text='Managment actions taken. Keep updating as appropriate.', null=True, verbose_name='Management Actions')),
                ('comments', models.TextField(blank=True, help_text='Any other comments or notes.', null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
            },
            bases=('observations.observation',),
        ),
        migrations.AddField(
            model_name='observation',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_observations.observation_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='observation',
            name='who',
            field=models.ForeignKey(help_text='The observer has to be a registered system user', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Observed by'),
        ),
        migrations.AddField(
            model_name='mediaattachment',
            name='observation',
            field=models.ForeignKey(help_text='Which Observation does this attachment relate to?', on_delete=django.db.models.deletion.CASCADE, to='observations.Observation', verbose_name='Observation'),
        ),
        migrations.CreateModel(
            name='TurtleStrandingObservation',
            fields=[
                ('strandingobservation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.StrandingObservation')),
                ('sex', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('unknown', 'Unknown')], default='unknown', help_text="The animal's sex.", max_length=300, verbose_name='Sex')),
                ('maturity', models.CharField(choices=[('hatchling', 'Hatchling'), ('juvenile', 'Juvenile'), ('adult', 'Adult'), ('unknown', 'Unknown')], default='unknown', help_text="The animal's maturity.", max_length=300, verbose_name='Maturity')),
                ('curved_carapace_length_mm', models.PositiveIntegerField(blank=True, help_text='', null=True, verbose_name='Curved Carapace Length (mm)')),
                ('curved_carapace_length_accuracy', models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='unknown', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Curved Carapace Length Accuracy')),
                ('curved_carapace_width_mm', models.PositiveIntegerField(blank=True, help_text='', null=True, verbose_name='Curved Carapace Width (mm)')),
                ('curved_carapace_width_accuracy', models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='unknown', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Curved Carapace Width Accuracy')),
                ('tail_length_mm', models.PositiveIntegerField(blank=True, help_text='Measured from carapace', null=True, verbose_name='Tail Length (mm)')),
                ('tail_length_accuracy', models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='unknown', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Tail Length Accuracy')),
                ('maximum_head_width_mm', models.PositiveIntegerField(blank=True, help_text='', null=True, verbose_name='Maximum Head Width (mm)')),
                ('maximum_head_width_accuracy', models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='unknown', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Maximum Head Width Accuracy')),
            ],
            options={
                'abstract': False,
            },
            bases=('observations.strandingobservation',),
        ),
        migrations.AddField(
            model_name='strandingobservation',
            name='features',
            field=models.ManyToManyField(blank=True, help_text='Select any observed distinguishing features.', to='observations.DistinguishingFeature'),
        ),
    ]
