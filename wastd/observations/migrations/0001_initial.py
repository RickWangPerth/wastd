# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2016-08-18 01:01
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django_fsm


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Encounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source', models.CharField(choices=[('direct', 'Direct entry'), ('paper', 'Paper data sheet'), ('wamtram', 'WAMTRAM 2 tagging DB'), ('ntp-exmouth', 'NTP Access DB Exmouth'), ('ntp-broome', 'NTP Access DB Broome')], default='direct', help_text='Where was this record captured initially?', max_length=300, verbose_name='Data Source')),
                ('source_id', models.CharField(blank=True, help_text='The ID of the record in the original source.', max_length=1000, null=True, verbose_name='Source ID')),
                ('status', django_fsm.FSMField(choices=[('new', 'New'), ('proofread', 'Proofread'), ('curated', 'Curated'), ('published', 'Published')], default='new', max_length=50, verbose_name='QA Status')),
                ('when', models.DateTimeField(help_text='The observation datetime, shown as local time (no daylight savings), stored as UTC.', verbose_name='Observed on')),
                ('where', django.contrib.gis.db.models.fields.PointField(help_text='The observation location as point in WGS84', srid=4326, verbose_name='Observed at')),
                ('location_accuracy', models.CharField(choices=[('10', 'GPS reading at exact location (10 m)'), ('1000', 'Site centroid or place name (1 km)'), ('10000', 'Rough estimate (10 km)')], default='1000', help_text='The accuracy of the supplied location.', max_length=300, verbose_name='Location accuracy')),
                ('as_html', models.TextField(blank=True, editable=False, help_text='The cached HTML representation for display purposes.', null=True, verbose_name='HTML representation')),
            ],
            options={
                'ordering': ['when', 'where'],
                'get_latest_by': 'when',
                'verbose_name': 'Encounter',
                'verbose_name_plural': 'Encounters',
            },
        ),
        migrations.CreateModel(
            name='Observation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AnimalEncounter',
            fields=[
                ('encounter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Encounter')),
                ('taxon', models.CharField(choices=[('na', 'not observed'), ('Cheloniidae', 'Marine turtles'), ('Cetacea', 'Whales and Dolphins'), ('Pinnipedia', 'Pinnipeds'), ('Sirenia', 'Dugongs'), ('Elasmobranchii', 'Sharks and Rays')], default='na', help_text='The taxonomic group of the animal.', max_length=300, verbose_name='Taxonomic group')),
                ('species', models.CharField(choices=[('na', 'not observed'), ('Natator depressus', 'Natator depressus (Flatback turtle)'), ('Chelonia mydas', 'Chelonia mydas (Green turtle)'), ('Eretmochelys imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('Caretta caretta', 'Caretta caretta (Loggerhead turtle)'), ('Lepidochelys olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('Dermochelys coriacea', 'Leatherback turtle (Dermochelys coriacea)'), ('Chelonia mydas agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('Corolla corolla', 'Corolla corolla (Hatchback turtle)'), ('unidentified-turtle', 'Unidentified turtle'), ('Delphinus delphis', 'Delphinus delphis (Short-beaked common dolphin)'), ('Grampus griseus', "Grampus griseus (Risso's dolphin)"), ('Lagenodelphis hosei', "Lagenodelphis hosei (Fraser's dolphin)"), ('Lagenorhynchus obscurus', 'Lagenorhynchus obscurus (Dusky dolphin)'), ('Orcaella heinsohni', 'Orcaella heinsohni (Australian snubfin dolphin)'), ('Sousa sahulensis', 'Sousa sahulensis (Australian humpback dolphin)'), ('Stenella attenuata', 'Stenella attenuata (Pantropical spotted dolphin)'), ('Stenella coeruleoalba', 'Stenella coeruleoalba (Striped dolphin)'), ('Stenella longirostris', 'Stenella longirostris (Spinner dolphin)'), ('Stenella sp.', 'Stenella sp. (Unidentified spotted dolphin)'), ('Steno bredanensis', 'Steno bredanensis (Rough-toothed dolphin)'), ('Tursiops aduncus', 'Tursiops aduncus (Indo-Pacific bottlenose dolphin)'), ('Tursiops truncatus', 'Tursiops truncatus (Offshore bottlenose dolphin)'), ('Tursiops sp.', 'Tursiops sp. (Unidentified bottlenose dolphin)'), ('unidentified-dolphin', 'Unidentified dolphin'), ('Balaenoptera acutorostrata', 'Balaenoptera acutorostrata (Dwarf minke whale)'), ('Balaenoptera bonaerensis', 'Balaenoptera bonaerensis (Antarctic minke whale)<'), ('Balaenoptera borealis', 'Balaenoptera borealis (Sei whale)'), ('Balaenoptera edeni', "Balaenoptera edeni (Bryde's whale)"), ('Balaenoptera musculus', 'Balaenoptera musculus (Blue whale)'), ('Balaenoptera musculus brevicauda', 'Balaenoptera musculus brevicauda (Pygmy blue whale)'), ('Balaenoptera physalus', 'Balaenoptera physalus (Fin whale)'), ('Balaenoptera sp.', 'Balaenoptera sp. (Unidentified Balaenoptera)'), ('Eubalaena australis', 'Eubalaena australis (Southern right whale)'), ('Feresa attenuata', 'Feresa attenuata (Pygmy killer whale)'), ('Globicephala macrorhynchus', 'Globicephala macrorhynchus (Short-finned pilot whale)'), ('Globicephala melas', 'Globicephala melas (Long-finned pilot whale)'), ('Globicephala sp.', 'Globicephala sp. (Unidentified pilot whale)'), ('Indopacetus pacificus', "Indopacetus pacificus (Longman's beaked whale)"), ('Kogia breviceps', 'Kogia breviceps (Pygmy sperm whale)'), ('Kogia sima', 'Kogia sima (Dwarf sperm whale)'), ('Kogia sp.', 'Kogia sp. (Unidentified small sperm whale)'), ('Megaptera novaeangliae', 'Megaptera novaeangliae (Humpback whale)'), ('Mesoplodon densirostris', "Mesoplodon densirostris (Blainville's beaked whale)"), ('Mesoplodon layardii', 'Mesoplodon layardii (Strap-toothed whale)'), ('Mesoplodon sp.', 'Mesoplodon sp. (Beaked whale)'), ('Orcinus orca', 'Orcinus orca (Killer whale)'), ('Peponocephala electra', 'Peponocephala electra (Melon-headed whale)'), ('Physeter macrocephalus', 'Physeter macrocephalus (Sperm whale)'), ('Pseudorca crassidens', 'Pseudorca crassidens (False killer whale)'), ('Ziphius cavirostris', "Ziphius cavirostris (Cuvier's beaked whale)"), ('unidentified-whale', 'Unidentified whale')], default='unidentified', help_text='The species of the animal.', max_length=300, verbose_name='Species')),
                ('sex', models.CharField(choices=[('na', 'not observed'), ('male', 'male'), ('female', 'female'), ('intersex', 'hermaphrodite or intersex')], default='na', help_text="The animal's sex.", max_length=300, verbose_name='Sex')),
                ('maturity', models.CharField(choices=[('na', 'not observed'), ('hatchling', 'hatchling'), ('post-hatchling', 'post-hatchling'), ('juvenile', 'juvenile'), ('pre-pubsecent-immature', 'pre-pubsecent immature'), ('pubsecent-immature', 'pubsecent immature'), ('adult-measured', 'adult (status determined from carapace and tail measurements)'), ('unweaned', 'unweaned immature'), ('weaned', 'weaned immature'), ('adult', 'adult'), ('unknown', 'unknown maturity')], default='na', help_text="The animal's maturity.", max_length=300, verbose_name='Maturity')),
                ('health', models.CharField(choices=[('na', 'not observed'), ('alive', 'Alive (healthy)'), ('alive-injured', 'Alive (injured)'), ('alive-then-died', 'Initally alive (but died)'), ('dead-edible', 'Dead (carcass edible)'), ('dead-organs-intact', 'Dead (decomposed but organs intact)'), ('dead-advanced', 'Dead (advanced decomposition)'), ('dead-mummified', 'Mummified (dead, skin holding bones)'), ('dead-disarticulated', 'Disarticulated (dead, no soft tissue remaining)'), ('other', 'Other')], default='na', help_text='On a scale from the Fresh Prince of Bel Air to 80s Hair Metal: how dead and decomposed is the animal?', max_length=300, verbose_name='Health status')),
                ('activity', models.CharField(choices=[('na', 'not observed'), ('arriving', 'arriving on beach'), ('digging-body-pit', 'digging body pit'), ('excavating-egg-chamber', 'excavating egg chamber'), ('laying-eggs', 'laying eggs'), ('filling-in-egg-chamber', 'filling in egg chamber'), ('returning-to-water', 'returning to water'), ('floating', 'Floating (dead, sick, unable to dive, drifting in water)'), ('beach-washed', 'Beach washed (dead, sick or stranded on beach/coast)'), ('beach-jumped', 'Beach jumped'), ('carcass-tagged-released', 'Carcass tagged and released'), ('carcass-inland', 'Carcass or butchered remains found removed from coast'), ('captivity', 'In captivity'), ('non-breeding', 'General non-breeding activity (swimming, sleeping, feeding, etc.)'), ('other', 'other activity')], default='na', help_text="The animal's activity at the time of observation.", max_length=300, verbose_name='Activity')),
                ('behaviour', models.TextField(blank=True, help_text='Notes on condition or behaviour if alive.', null=True, verbose_name='Behaviour')),
                ('habitat', models.CharField(choices=[('na', 'not observed'), ('beach', 'Beach (below vegetation line)'), ('bays-estuaries', 'Bays, estuaries and other enclosed shallow soft sediments'), ('dune', 'Dune'), ('dune-constructed-hard-substrate', 'Dune, constructed hard substrate (concrete slabs, timber floors, helipad)'), ('dune-grass-area', 'Dune, grass area'), ('dune-compacted-path', 'Dune, hard compacted areas (road ways, paths)'), ('dune-rubble', 'Dune, rubble, usually coral'), ('dune-bare-sand', 'Dune, bare sand area'), ('dune-beneath-vegetation', 'Dune, beneath tree or shrub'), ('slope-front-dune', 'Dune, front slope'), ('sand-flats', 'Sand flats'), ('slope-grass', 'Slope, grass area'), ('slope-bare-sand', 'Slope, bare sand area'), ('slope-beneath-vegetation', 'Slope, beneath tree or shrub'), ('below-mean-spring-high-water-mark', 'Below the mean spring high water line or current level of inundation'), ('lagoon-patch-reef', 'Lagoon, patch reef'), ('lagoon-open-sand', 'Lagoon, open sand areas'), ('mangroves', 'Mangroves'), ('reef-coral', 'Coral reef'), ('reef-crest-front-slope', 'Reef crest (dries at low water) and front reef slope areas'), ('reef-flat', 'Reef flat, dries at low tide'), ('reef-seagrass-flats', 'Coral reef with seagrass flats'), ('reef-rocky', 'Rocky reef'), ('open-water', 'Open water')], default='na', help_text='The habitat in which the animal was encountered.', max_length=500, verbose_name='Habitat')),
            ],
            options={
                'ordering': ['when', 'where'],
                'get_latest_by': 'when',
                'verbose_name': 'Animal Encounter',
                'verbose_name_plural': 'Animal Encounters',
            },
            bases=('observations.encounter',),
        ),
        migrations.CreateModel(
            name='DistinguishingFeatureObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('damage_injury', models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Obvious damage or injuries')),
                ('scanned_for_pit_tags', models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Scanned for PIT tags')),
                ('missing_limbs', models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Missing limbs')),
                ('barnacles', models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Barnacles')),
                ('algal_growth', models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Algal growth on carapace')),
                ('tagging_scars', models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Tagging scars')),
                ('propeller_damage', models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='', max_length=300, verbose_name='Propeller strike damage')),
                ('entanglement', models.CharField(choices=[('na', 'Not observed'), ('absent', 'Confirmed absent'), ('present', 'Confirmed present')], default='na', help_text='Entanglement in anthropogenic debris', max_length=300, verbose_name='Entanglement')),
                ('see_photo', models.CharField(choices=[('na', 'Not applicable'), ('see photos', 'See attached photos for details')], default='na', help_text='More relevant detail in attached photos', max_length=300, verbose_name='See attached photos')),
                ('comments', models.TextField(blank=True, help_text='Further comments on distinguising features.', null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='ManagementAction',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('management_actions', models.TextField(blank=True, help_text='Managment actions taken. Keep updating as appropriate.', null=True, verbose_name='Management Actions')),
                ('comments', models.TextField(blank=True, help_text='Any other comments or notes.', null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='MediaAttachment',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('media_type', models.CharField(choices=[('data_sheet', 'Data sheet'), ('communication', 'Communication record'), ('photograph', 'Photograph'), ('other', 'Other')], default='photograph', help_text='What is the attached file about?', max_length=300, verbose_name='Attachment type')),
                ('title', models.CharField(blank=True, help_text='Give the attachment a representative name', max_length=300, null=True, verbose_name='Attachment name')),
                ('attachment', models.FileField(help_text='Upload the file', upload_to='attachments/%Y/%m/%d/', verbose_name='File attachment')),
            ],
            options={
                'abstract': False,
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='TagObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('tag_type', models.CharField(choices=[('flipper-tag', 'Flipper Tag'), ('pit-tag', 'PIT Tag'), ('satellite-tag', 'Satellite Tag'), ('blood-sample', 'Blood Sample'), ('biopsy-sample', 'Biopsy Sample'), ('egg-sample', 'Egg Sample'), ('physical-sample', 'Physical Sample'), ('whisker-id', 'Whisker ID'), ('other', 'Other')], default='flipper-tag', help_text='What kind of tag is it?', max_length=300, verbose_name='Tag type')),
                ('side', models.CharField(choices=[('L', 'left front flipper'), ('R', 'right front flipper'), ('C', 'carapace'), ('N', 'neck'), ('O', 'other, see comments')], default='L', help_text='Is the tag on the left or right front flipper?', max_length=300, verbose_name='Tag side')),
                ('position', models.CharField(choices=[('1', '1st scale from body/head'), ('2', '2nd scale from body/head'), ('3', '3rd scale from body/head'), ('O', 'other, see comments')], default='1', help_text='Counting from inside, to which flipper scale is the tag attached?', max_length=300, verbose_name='Tag position')),
                ('name', models.CharField(help_text='The ID of a tag must be unique within the tag type.', max_length=1000, verbose_name='Tag ID')),
                ('status', models.CharField(choices=[('ordered', 'ordered from manufacturer'), ('produced', 'produced by manufacturer'), ('delivered', 'delivered to HQ'), ('allocated', 'allocated to field team'), ('attached', 'attached new to an animal'), ('recaptured', 're-sighted as attached to animal'), ('removed', 'taken off an animal'), ('found', 'found detached'), ('returned', 'returned to HQ'), ('decommissioned', 'decommissioned from active tag pool'), ('destroyed', 'destroyed'), ('observed', 'observed in any other context, see comments')], default='recaptured', help_text='The status this tag was seen in, or brought into.', max_length=300, verbose_name='Tag status')),
                ('comments', models.TextField(blank=True, help_text='Any other comments or notes.', null=True, verbose_name='Comments')),
            ],
            options={
                'abstract': False,
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='TurtleDamageObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('body_part', models.CharField(choices=[('head', 'head'), ('plastron', 'plastron'), ('carapace', 'carapace'), ('tail', 'tail'), ('flipper-front-left', 'front left flipper'), ('flipper-front-right', 'front right flipper'), ('flipper-rear-left', 'rear left flipper'), ('flipper-rear-right', 'rear right flipper'), ('whole-turtle', 'whole turtle')], default='whole-turtle', help_text='The body part affected by the observed damage.', max_length=300, verbose_name='Affected body part')),
                ('damage_type', models.CharField(choices=[('minor-trauma', 'minor trauma'), ('major-trauma', 'major trauma'), ('tip-amputated', 'tip amputation'), ('amputated-from-nail', 'amputation from nail'), ('amputated-half', 'half amputation'), ('amputated-entirely', 'entire amputation'), ('cuts', 'cuts'), ('deformity', 'deformity'), ('propeller-strike', 'propeller strike'), ('entanglement', 'entanglement'), ('other', 'other')], default='minor-trauma', help_text='The type of the damage.', max_length=300, verbose_name='Damage age')),
                ('damage_age', models.CharField(choices=[('healed-entirely', 'entirely healed'), ('healed-partially', 'partially healed'), ('fresh', 'fresh')], default='healed-entirely', help_text='The age of the damage.', max_length=300, verbose_name='Damage age')),
                ('description', models.TextField(blank=True, help_text='A description of the damage.', null=True, verbose_name='Description')),
            ],
            options={
                'abstract': False,
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='TurtleMorphometricObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('curved_carapace_length_mm', models.PositiveIntegerField(blank=True, help_text='The Curved Carapace Length in millimetres.', null=True, verbose_name='Curved Carapace Length (mm)')),
                ('curved_carapace_length_accuracy', models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='unknown', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Curved Carapace Length Accuracy')),
                ('curved_carapace_notch_mm', models.PositiveIntegerField(blank=True, help_text='The Curved Carapace Notch in millimetres.', null=True, verbose_name='Curved Carapace Notch (mm)')),
                ('curved_carapace_notch_accuracy', models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='unknown', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Curved Carapace Notch Accuracy')),
                ('curved_carapace_width_mm', models.PositiveIntegerField(blank=True, help_text='Curved Carapace Width in millimetres.', null=True, verbose_name='Curved Carapace Width (mm)')),
                ('curved_carapace_width_accuracy', models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='unknown', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Curved Carapace Width Accuracy')),
                ('tail_length_mm', models.PositiveIntegerField(blank=True, help_text='The Tail Length, measured from carapace in millimetres.', null=True, verbose_name='Tail Length (mm)')),
                ('tail_length_accuracy', models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='unknown', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Tail Length Accuracy')),
                ('maximum_head_width_mm', models.PositiveIntegerField(blank=True, help_text='The Maximum Head Width in millimetres.', null=True, verbose_name='Maximum Head Width (mm)')),
                ('maximum_head_width_accuracy', models.CharField(choices=[('unknown', 'Unknown'), ('estimated', 'Estimated'), ('measured', 'Measured')], default='unknown', help_text='The measurement type as indication of accuracy.', max_length=300, verbose_name='Maximum Head Width Accuracy')),
            ],
            options={
                'abstract': False,
            },
            bases=('observations.observation',),
        ),
        migrations.CreateModel(
            name='TurtleNestEncounter',
            fields=[
                ('encounter_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Encounter')),
                ('nest_age', models.CharField(choices=[('false-crawl', 'False crawl'), ('nesting-turtle-present', 'New nest (turtle present)'), ('fresh', 'New nest (turtle absent)'), ('predated', 'Predated nest'), ('hatched', 'Hatched nest')], default='new', help_text='The nest age and type.', max_length=300, verbose_name='Nest age')),
                ('species', models.CharField(choices=[('na', 'not observed'), ('Natator depressus', 'Natator depressus (Flatback turtle)'), ('Chelonia mydas', 'Chelonia mydas (Green turtle)'), ('Eretmochelys imbricata', 'Eretmochelys imbricata (Hawksbill turtle)'), ('Caretta caretta', 'Caretta caretta (Loggerhead turtle)'), ('Lepidochelys olivacea', 'Lepidochelys olivacea (Olive ridley turtle)'), ('Dermochelys coriacea', 'Leatherback turtle (Dermochelys coriacea)'), ('Chelonia mydas agassazzi', 'Chelonia mydas agassazzi (Black turtle or East Pacific Green)'), ('Corolla corolla', 'Corolla corolla (Hatchback turtle)'), ('unidentified-turtle', 'Unidentified turtle'), ('Delphinus delphis', 'Delphinus delphis (Short-beaked common dolphin)'), ('Grampus griseus', "Grampus griseus (Risso's dolphin)"), ('Lagenodelphis hosei', "Lagenodelphis hosei (Fraser's dolphin)"), ('Lagenorhynchus obscurus', 'Lagenorhynchus obscurus (Dusky dolphin)'), ('Orcaella heinsohni', 'Orcaella heinsohni (Australian snubfin dolphin)'), ('Sousa sahulensis', 'Sousa sahulensis (Australian humpback dolphin)'), ('Stenella attenuata', 'Stenella attenuata (Pantropical spotted dolphin)'), ('Stenella coeruleoalba', 'Stenella coeruleoalba (Striped dolphin)'), ('Stenella longirostris', 'Stenella longirostris (Spinner dolphin)'), ('Stenella sp.', 'Stenella sp. (Unidentified spotted dolphin)'), ('Steno bredanensis', 'Steno bredanensis (Rough-toothed dolphin)'), ('Tursiops aduncus', 'Tursiops aduncus (Indo-Pacific bottlenose dolphin)'), ('Tursiops truncatus', 'Tursiops truncatus (Offshore bottlenose dolphin)'), ('Tursiops sp.', 'Tursiops sp. (Unidentified bottlenose dolphin)'), ('unidentified-dolphin', 'Unidentified dolphin'), ('Balaenoptera acutorostrata', 'Balaenoptera acutorostrata (Dwarf minke whale)'), ('Balaenoptera bonaerensis', 'Balaenoptera bonaerensis (Antarctic minke whale)<'), ('Balaenoptera borealis', 'Balaenoptera borealis (Sei whale)'), ('Balaenoptera edeni', "Balaenoptera edeni (Bryde's whale)"), ('Balaenoptera musculus', 'Balaenoptera musculus (Blue whale)'), ('Balaenoptera musculus brevicauda', 'Balaenoptera musculus brevicauda (Pygmy blue whale)'), ('Balaenoptera physalus', 'Balaenoptera physalus (Fin whale)'), ('Balaenoptera sp.', 'Balaenoptera sp. (Unidentified Balaenoptera)'), ('Eubalaena australis', 'Eubalaena australis (Southern right whale)'), ('Feresa attenuata', 'Feresa attenuata (Pygmy killer whale)'), ('Globicephala macrorhynchus', 'Globicephala macrorhynchus (Short-finned pilot whale)'), ('Globicephala melas', 'Globicephala melas (Long-finned pilot whale)'), ('Globicephala sp.', 'Globicephala sp. (Unidentified pilot whale)'), ('Indopacetus pacificus', "Indopacetus pacificus (Longman's beaked whale)"), ('Kogia breviceps', 'Kogia breviceps (Pygmy sperm whale)'), ('Kogia sima', 'Kogia sima (Dwarf sperm whale)'), ('Kogia sp.', 'Kogia sp. (Unidentified small sperm whale)'), ('Megaptera novaeangliae', 'Megaptera novaeangliae (Humpback whale)'), ('Mesoplodon densirostris', "Mesoplodon densirostris (Blainville's beaked whale)"), ('Mesoplodon layardii', 'Mesoplodon layardii (Strap-toothed whale)'), ('Mesoplodon sp.', 'Mesoplodon sp. (Beaked whale)'), ('Orcinus orca', 'Orcinus orca (Killer whale)'), ('Peponocephala electra', 'Peponocephala electra (Melon-headed whale)'), ('Physeter macrocephalus', 'Physeter macrocephalus (Sperm whale)'), ('Pseudorca crassidens', 'Pseudorca crassidens (False killer whale)'), ('Ziphius cavirostris', "Ziphius cavirostris (Cuvier's beaked whale)"), ('unidentified-whale', 'Unidentified whale')], default='na', help_text='The species of the animal.', max_length=300, verbose_name='Species')),
                ('habitat', models.CharField(choices=[('na', 'not observed'), ('beach', 'Beach (below vegetation line)'), ('bays-estuaries', 'Bays, estuaries and other enclosed shallow soft sediments'), ('dune', 'Dune'), ('dune-constructed-hard-substrate', 'Dune, constructed hard substrate (concrete slabs, timber floors, helipad)'), ('dune-grass-area', 'Dune, grass area'), ('dune-compacted-path', 'Dune, hard compacted areas (road ways, paths)'), ('dune-rubble', 'Dune, rubble, usually coral'), ('dune-bare-sand', 'Dune, bare sand area'), ('dune-beneath-vegetation', 'Dune, beneath tree or shrub'), ('slope-front-dune', 'Dune, front slope'), ('sand-flats', 'Sand flats'), ('slope-grass', 'Slope, grass area'), ('slope-bare-sand', 'Slope, bare sand area'), ('slope-beneath-vegetation', 'Slope, beneath tree or shrub'), ('below-mean-spring-high-water-mark', 'Below the mean spring high water line or current level of inundation'), ('lagoon-patch-reef', 'Lagoon, patch reef'), ('lagoon-open-sand', 'Lagoon, open sand areas'), ('mangroves', 'Mangroves'), ('reef-coral', 'Coral reef'), ('reef-crest-front-slope', 'Reef crest (dries at low water) and front reef slope areas'), ('reef-flat', 'Reef flat, dries at low tide'), ('reef-seagrass-flats', 'Coral reef with seagrass flats'), ('reef-rocky', 'Rocky reef'), ('open-water', 'Open water')], default='na', help_text='The habitat in which the nest was encountered.', max_length=500, verbose_name='Habitat')),
            ],
            options={
                'ordering': ['when', 'where'],
                'get_latest_by': 'when',
                'verbose_name': 'Turtle Nest Encounter',
                'verbose_name_plural': 'Turtle Nest Encounters',
            },
            bases=('observations.encounter',),
        ),
        migrations.CreateModel(
            name='TurtleNestObservation',
            fields=[
                ('observation_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='observations.Observation')),
                ('nest_position', models.CharField(choices=[('below-hwm', 'below high water mark'), ('above-hw', 'above high water mark, below dune'), ('dune-edge', 'edge of dune, beginning of spinifex'), ('in-dune', 'inside dune, spinifex')], default='unknown', help_text='The position of the nest on the beach.', max_length=300, verbose_name='Beach position')),
                ('eggs_laid', models.BooleanField(default=False, help_text="Did round, white objects leave the turtle's butt?", verbose_name='Did the turtle lay eggs?')),
                ('egg_count', models.PositiveIntegerField(blank=True, help_text='The total number of eggs laid.', null=True, verbose_name='Total number of eggs laid')),
                ('no_egg_shells', models.PositiveIntegerField(blank=True, help_text='The number of egg shells in the nest.', null=True, verbose_name='Egg shells')),
                ('no_live_hatchlings', models.PositiveIntegerField(blank=True, help_text='The number of in the nest.', null=True, verbose_name='Live hatchlings')),
                ('no_dead_hatchlings', models.PositiveIntegerField(blank=True, help_text='The number of dead hatchlings in the nest.', null=True, verbose_name='Dead hatchlings')),
                ('no_undeveloped_eggs', models.PositiveIntegerField(blank=True, help_text='The number of undeveloped eggs in the nest.', null=True, verbose_name='Undeveloped eggs')),
                ('no_dead_embryos', models.PositiveIntegerField(blank=True, help_text='The number of dead embryos in the nest.', null=True, verbose_name='Dead embryos')),
                ('no_dead_full_term_embryos', models.PositiveIntegerField(blank=True, help_text='The number of dead full term embryos in the nest.', null=True, verbose_name='Dead full term embryos')),
                ('no_depredated_eggs', models.PositiveIntegerField(blank=True, help_text='The number of depredated eggs in the nest.', null=True, verbose_name='Depredated eggs`')),
                ('no_unfertilized', models.PositiveIntegerField(blank=True, help_text='The number of unfertilized eggs in the nest.', null=True, verbose_name='Unfertilized eggs')),
                ('no_yolkless_eggs', models.PositiveIntegerField(blank=True, help_text='The number of yolkless eggs in the nest.', null=True, verbose_name='Yolkless eggs')),
                ('nest_depth_top', models.PositiveIntegerField(blank=True, help_text='The depth of sand above the eggs in mm.', null=True, verbose_name='Nest depth (top) mm')),
                ('nest_depth_bottom', models.PositiveIntegerField(blank=True, help_text='The depth of the lowest eggs in mm.', null=True, verbose_name='Nest depth (bottom) mm')),
                ('sand_temp', models.FloatField(blank=True, help_text='The sand temperature in degree Celsius.', null=True, verbose_name='Sand temperature')),
                ('air_temp', models.FloatField(blank=True, help_text='The air temperature in degree Celsius.', null=True, verbose_name='Air temperature')),
                ('water_temp', models.FloatField(blank=True, help_text='The water temperature in degree Celsius.', null=True, verbose_name='Water temperature')),
                ('egg_temp', models.FloatField(blank=True, help_text='The egg temperature in degree Celsius.', null=True, verbose_name='Egg temperature')),
            ],
            options={
                'abstract': False,
            },
            bases=('observations.observation',),
        ),
        migrations.AddField(
            model_name='observation',
            name='encounter',
            field=models.ForeignKey(help_text='The Encounter during which the observation was made', on_delete=django.db.models.deletion.CASCADE, to='observations.Encounter', verbose_name='Encounter'),
        ),
        migrations.AddField(
            model_name='observation',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_observations.observation_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='observer',
            field=models.ForeignKey(help_text='The observer has to be a registered system user', on_delete=django.db.models.deletion.CASCADE, related_name='observer', to=settings.AUTH_USER_MODEL, verbose_name='Observed by'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_observations.encounter_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='encounter',
            name='reporter',
            field=models.ForeignKey(help_text='The reporter has to be a registered system user', on_delete=django.db.models.deletion.CASCADE, related_name='reporter', to=settings.AUTH_USER_MODEL, verbose_name='Reported by'),
        ),
        migrations.AlterUniqueTogether(
            name='encounter',
            unique_together=set([('source', 'source_id')]),
        ),
    ]
